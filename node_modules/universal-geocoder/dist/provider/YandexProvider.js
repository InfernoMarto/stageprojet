"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var provider_1 = require("./");
var Geocoded_1 = __importDefault(require("../Geocoded"));
var YandexProvider = /** @class */ (function () {
    function YandexProvider(_externalLoader, options) {
        if (options === void 0) { options = provider_1.defaultProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, provider_1.defaultProviderOptions), options);
    }
    YandexProvider.prototype.geocode = function (query, callback, errorCallback) {
        var geocodeQuery = provider_1.ProviderHelpers.getGeocodeQueryFromParameter(query);
        if (geocodeQuery.getIp()) {
            throw new Error("The Yandex provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "geocode-maps.yandex.ru",
            pathname: "1.x",
        });
        var params = {
            apikey: this.options.apiKey,
            geocode: geocodeQuery.getText() || "",
            format: "json",
            lang: geocodeQuery.getLocale(),
            jsonpCallback: this.options.useJsonp ? "callback" : undefined,
        };
        this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    YandexProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var reverseQuery = provider_1.ProviderHelpers.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = provider_1.ProviderHelpers.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = provider_1.ProviderHelpers.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "geocode-maps.yandex.ru",
            pathname: "1.x",
        });
        var params = {
            apikey: this.options.apiKey,
            geocode: reverseQuery.getCoordinates().longitude + "," + reverseQuery.getCoordinates().latitude,
            format: "json",
            lang: reverseQuery.getLocale(),
            toponym: this.options.toponym,
            jsonpCallback: this.options.useJsonp ? "callback" : undefined,
        };
        this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    YandexProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.response.GeoObjectCollection.featureMember.map(function (result) {
                return YandexProvider.mapToGeocoded(result.GeoObject);
            }));
        }, headers, body, errorCallback);
    };
    YandexProvider.mapToGeocoded = function (result) {
        var point = result.Point.pos.split(" ");
        var latitude = parseFloat(point[1]);
        var longitude = parseFloat(point[0]);
        var addressDetails = YandexProvider.flattenObject(result.metaDataProperty.GeocoderMetaData.AddressDetails);
        var streetNumber = addressDetails.PremiseNumber;
        var streetName = addressDetails.ThoroughfareName;
        var subLocality = addressDetails.DependentLocalityName;
        var locality = addressDetails.LocalityName;
        var region = addressDetails.AdministrativeAreaName;
        var country = addressDetails.CountryName;
        var countryCode = addressDetails.CountryNameCode;
        var geocoded = Geocoded_1.default.create({
            latitude: latitude,
            longitude: longitude,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            region: region,
            country: country,
            countryCode: countryCode,
        });
        var lowerCorner = result.boundedBy.Envelope.lowerCorner.split(" ");
        var upperCorner = result.boundedBy.Envelope.upperCorner.split(" ");
        geocoded = geocoded.withBounds(parseFloat(lowerCorner[1]), parseFloat(lowerCorner[0]), parseFloat(upperCorner[1]), parseFloat(upperCorner[0]));
        return geocoded;
    };
    YandexProvider.flattenObject = function (object) {
        var flattened = {};
        var step = function (nestedObject) {
            Object.keys(nestedObject).forEach(function (key) {
                var value = nestedObject[key];
                var isArray = Array.isArray(value);
                var type = Object.prototype.toString.call(value);
                var isObject = type === "[object Object]" || type === "[object Array]";
                if (!isArray &&
                    isObject &&
                    Object.keys(value).length) {
                    step(value);
                    return;
                }
                flattened[key] = value;
            });
        };
        step(object);
        return flattened;
    };
    return YandexProvider;
}());
exports.default = YandexProvider;
//# sourceMappingURL=YandexProvider.js.map