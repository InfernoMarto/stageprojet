"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultNominatimProviderOptions = void 0;
var provider_1 = require("./..");
var AdminLevel_1 = __importDefault(require("../../AdminLevel"));
var error_1 = require("../../error");
exports.defaultNominatimProviderOptions = __assign(__assign({}, provider_1.defaultProviderOptions), { host: "nominatim.openstreetmap.org", userAgent: "" });
var NominatimProvider = /** @class */ (function () {
    function NominatimProvider(_externalLoader, options) {
        if (options === void 0) { options = exports.defaultNominatimProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, exports.defaultNominatimProviderOptions), options);
        if (this.options.host === exports.defaultNominatimProviderOptions.host &&
            !this.options.userAgent) {
            throw new Error('An User-Agent identifying your application is required for the OpenStreetMap / Nominatim provider when using the default host. Please add it in the "userAgent" option.');
        }
    }
    NominatimProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _a, _b, _c, _d;
        var geocodeQuery = provider_1.ProviderHelpers.getGeocodeQueryFromParameter(query, provider_1.NominatimGeocodeQuery);
        if (geocodeQuery.getIp()) {
            throw new Error("The OpenStreetMap / Nominatim provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.host,
            pathname: "search",
        });
        var params = this.withCommonParams({
            q: geocodeQuery.getText(),
            limit: geocodeQuery.getLimit().toString(),
            countrycodes: geocodeQuery.getCountryCodes()
                ? (_a = geocodeQuery.getCountryCodes()) === null || _a === void 0 ? void 0 : _a.join(",") : undefined,
            exclude_place_ids: (geocodeQuery).getExcludePlaceIds()
                ? (_b = geocodeQuery
                    .getExcludePlaceIds()) === null || _b === void 0 ? void 0 : _b.join(",") : undefined,
            viewbox: geocodeQuery.getViewBox()
                ? (_c = geocodeQuery.getViewBox()) === null || _c === void 0 ? void 0 : _c.join(",") : undefined,
            bounded: geocodeQuery.getBounded()
                ? (_d = geocodeQuery.getBounded()) === null || _d === void 0 ? void 0 : _d.toString() : undefined,
        }, geocodeQuery);
        this.executeRequest(params, callback, this.getHeaders(), {}, errorCallback);
    };
    NominatimProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _a;
        var reverseQuery = provider_1.ProviderHelpers.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, provider_1.NominatimReverseQuery);
        var reverseCallback = provider_1.ProviderHelpers.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = provider_1.ProviderHelpers.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.host,
            pathname: "reverse",
        });
        var params = this.withCommonParams({
            lat: reverseQuery.getCoordinates().latitude.toString(),
            lon: reverseQuery.getCoordinates().longitude.toString(),
            zoom: ((_a = reverseQuery.getZoom()) === null || _a === void 0 ? void 0 : _a.toString()) || "18",
        }, reverseQuery);
        this.executeRequest(params, reverseCallback, this.getHeaders(), {}, reverseErrorCallback);
    };
    NominatimProvider.prototype.withCommonParams = function (params, query) {
        return __assign(__assign({}, params), { format: "jsonv2", addressdetails: "1", jsonpCallback: this.options.useJsonp ? "json_callback" : undefined, "accept-language": query.getLocale() });
    };
    NominatimProvider.prototype.getHeaders = function () {
        return {
            "User-Agent": this.options.userAgent || "",
            Referer: this.options.referer,
        };
    };
    NominatimProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            var results = data;
            if (!Array.isArray(data)) {
                if (data.error) {
                    var errorMessage_1 = "An error has occurred: " + data.error;
                    if (errorCallback) {
                        errorCallback(new error_1.ResponseError(errorMessage_1, data));
                        return;
                    }
                    setTimeout(function () {
                        throw new Error(errorMessage_1);
                    });
                    return;
                }
                results = [data];
            }
            callback(results.map(function (result) {
                return NominatimProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    NominatimProvider.mapToGeocoded = function (result) {
        var latitude = parseFloat(result.lat);
        var longitude = parseFloat(result.lon);
        var displayName = result.display_name;
        var streetNumber = result.address.house_number;
        var streetName = result.address.road || result.address.pedestrian;
        var subLocality = result.address.suburb;
        var locality;
        var postalCode = result.address.postcode
            ? result.address.postcode.split(";")[0]
            : undefined;
        var region = result.address.state;
        var country = result.address.country;
        var countryCode = result.address.country_code;
        var osmId = result.osm_id;
        var osmType = result.osm_type;
        var category = result.category;
        var type = result.type;
        var attribution = result.licence;
        var localityTypes = [
            "city",
            "town",
            "village",
            "hamlet",
        ];
        localityTypes.forEach(function (localityType) {
            if (result.address[localityType] && !locality) {
                locality = result.address[localityType];
            }
        });
        var geocoded = provider_1.NominatimGeocoded.create({
            latitude: latitude,
            longitude: longitude,
            displayName: displayName,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            osmId: osmId,
            osmType: osmType,
            category: category,
            type: type,
            attribution: attribution,
        });
        geocoded = (geocoded.withBounds(parseFloat(result.boundingbox[0]), parseFloat(result.boundingbox[2]), parseFloat(result.boundingbox[1]), parseFloat(result.boundingbox[3])));
        var adminLevels = ["state", "county"];
        adminLevels.forEach(function (adminLevel, level) {
            if (result.address[adminLevel]) {
                geocoded.addAdminLevel(AdminLevel_1.default.create({
                    level: level + 1,
                    name: result.address[adminLevel] || "",
                }));
            }
        });
        return geocoded;
    };
    return NominatimProvider;
}());
exports.default = NominatimProvider;
//# sourceMappingURL=NominatimProvider.js.map