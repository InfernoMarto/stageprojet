"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var provider_1 = require("./");
var Geocoded_1 = __importDefault(require("../Geocoded"));
var MapQuestProvider = /** @class */ (function () {
    function MapQuestProvider(_externalLoader, options) {
        if (options === void 0) { options = provider_1.defaultProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, provider_1.defaultProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the MapQuest provider. Please add it in the "apiKey" option.');
        }
    }
    MapQuestProvider.prototype.geocode = function (query, callback, errorCallback) {
        var geocodeQuery = provider_1.ProviderHelpers.getGeocodeQueryFromParameter(query);
        if (geocodeQuery.getIp()) {
            throw new Error("The MapQuest provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "www.mapquestapi.com",
            pathname: "geocoding/v1/address",
        });
        var params = {
            key: this.options.apiKey,
            location: geocodeQuery.getText() || "",
            jsonpCallback: this.options.useJsonp ? "callback" : undefined,
        };
        this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    MapQuestProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var reverseQuery = provider_1.ProviderHelpers.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = provider_1.ProviderHelpers.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = provider_1.ProviderHelpers.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "www.mapquestapi.com",
            pathname: "geocoding/v1/reverse",
        });
        var params = {
            key: this.options.apiKey,
            location: reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
            jsonpCallback: this.options.useJsonp ? "callback" : undefined,
        };
        this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    MapQuestProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.results[0].locations.map(function (result) {
                return MapQuestProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    MapQuestProvider.mapToGeocoded = function (result) {
        var latitude = result.latLng.lat;
        var longitude = result.latLng.lng;
        var streetName = result.street;
        var subLocality = result.adminArea6;
        var locality = result.adminArea5;
        var postalCode = result.postalCode;
        var region = result.adminArea4;
        var country = result.adminArea1;
        var countryCode = result.adminArea1;
        return Geocoded_1.default.create({
            latitude: latitude,
            longitude: longitude,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
        });
    };
    return MapQuestProvider;
}());
exports.default = MapQuestProvider;
//# sourceMappingURL=MapquestProvider.js.map