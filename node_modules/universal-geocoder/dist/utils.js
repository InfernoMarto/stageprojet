"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequireFunc = exports.isIpv6 = exports.isIpv4 = exports.decodeBase64 = exports.encodeUrlSafeBase64 = exports.decodeUrlSafeBase64 = exports.filterUndefinedObjectValues = exports.isBrowser = void 0;
exports.isBrowser = function () { return typeof window !== "undefined"; };
exports.filterUndefinedObjectValues = function (object) {
    return Object.keys(object).reduce(function (acc, key) {
        var filtered = acc;
        var value = object[key];
        if (value !== undefined) {
            filtered[key] = value;
        }
        return filtered;
    }, {});
};
/**
 * Decode from URL-safe base64 to true base64.
 */
exports.decodeUrlSafeBase64 = function (safe) {
    return safe.replace(/-/g, "+").replace(/_/g, "/");
};
/**
 * Encode from true base64 to URL-safe base64.
 */
exports.encodeUrlSafeBase64 = function (base64) {
    return base64.replace(/\+/g, "-").replace(/\//g, "_");
};
exports.decodeBase64 = function (base64) {
    if (exports.isBrowser()) {
        throw new Error("decodeBase64 can only be used in a Node environment.");
    }
    return Buffer.from(base64, "base64").toString();
};
// From https://github.com/sindresorhus/ip-regex
var ipv4RegExp = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
exports.isIpv4 = function (ip) {
    return new RegExp("^" + ipv4RegExp + "$").test(ip);
};
// From https://github.com/sindresorhus/ip-regex
var ipv6Seg = "[a-fA-F\\d]{1,4}";
var ipv6RegExp = "((?:" + ipv6Seg + ":){7}(?:" + ipv6Seg + "|:)|(?:" + ipv6Seg + ":){6}(?:" + ipv4RegExp + "|:" + ipv6Seg + "|:)|(?:" + ipv6Seg + ":){5}(?::" + ipv4RegExp + "|(:" + ipv6Seg + "){1,2}|:)|(?:" + ipv6Seg + ":){4}(?:(:" + ipv6Seg + "){0,1}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,3}|:)|(?:" + ipv6Seg + ":){3}(?:(:" + ipv6Seg + "){0,2}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,4}|:)|(?:" + ipv6Seg + ":){2}(?:(:" + ipv6Seg + "){0,3}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,5}|:)|(?:" + ipv6Seg + ":){1}(?:(:" + ipv6Seg + "){0,4}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,6}|:)|(?::((?::" + ipv6Seg + "){0,5}:" + ipv4RegExp + "|(?::" + ipv6Seg + "){1,7}|:)))(%[0-9a-zA-Z]{1,})?";
exports.isIpv6 = function (ip) {
    return new RegExp("^" + ipv6RegExp + "$").test(ip);
};
// eslint-disable-next-line @typescript-eslint/ban-types
exports.getRequireFunc = function () {
    // eslint-disable-next-line camelcase
    return typeof __non_webpack_require__ === "function"
        ? // eslint-disable-next-line camelcase
            __non_webpack_require__
        : require;
};
//# sourceMappingURL=utils.js.map