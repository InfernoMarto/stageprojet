/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports) {

var global = typeof self !== 'undefined' ? self : this;
var __self__ = (function () {
function F() {
this.fetch = false;
this.DOMException = global.DOMException
}
F.prototype = global;
return new F();
})();
(function(self) {

var irrelevant = (function (exports) {

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports


/***/ }),

/***/ "./src/AdminLevel.ts":
/*!***************************!*\
  !*** ./src/AdminLevel.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ADMIN_LEVEL_CODES": () => (/* binding */ ADMIN_LEVEL_CODES),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line no-shadow
var ADMIN_LEVEL_CODES;
(function (ADMIN_LEVEL_CODES) {
    ADMIN_LEVEL_CODES[ADMIN_LEVEL_CODES["STATE_CODE"] = 1] = "STATE_CODE";
    ADMIN_LEVEL_CODES[ADMIN_LEVEL_CODES["COUNTY_CODE"] = 2] = "COUNTY_CODE";
})(ADMIN_LEVEL_CODES || (ADMIN_LEVEL_CODES = {}));
var AdminLevel = /** @class */ (function () {
    function AdminLevel(_a) {
        var level = _a.level, name = _a.name, code = _a.code;
        this.level = level;
        this.name = name;
        this.code = code;
    }
    AdminLevel.create = function (object) {
        return new this(object);
    };
    AdminLevel.prototype.toObject = function () {
        return {
            level: this.level,
            name: this.name,
            code: this.code,
        };
    };
    AdminLevel.prototype.getLevel = function () {
        return this.level;
    };
    AdminLevel.prototype.getName = function () {
        return this.name;
    };
    AdminLevel.prototype.getCode = function () {
        return this.code;
    };
    return AdminLevel;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AdminLevel);


/***/ }),

/***/ "./src/ExternalLoader.ts":
/*!*******************************!*\
  !*** ./src/ExternalLoader.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./src/error/ResponseError.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};



var defaultOptions = {
    protocol: "http",
    method: "GET",
};
/**
 * Load data from external geocoding engines.
 */
var ExternalLoader = /** @class */ (function () {
    function ExternalLoader(options) {
        if (options === void 0) { options = defaultOptions; }
        this.options = defaultOptions;
        this.setOptions(options);
    }
    ExternalLoader.prototype.setOptions = function (options) {
        this.options = __assign(__assign({}, defaultOptions), options);
    };
    ExternalLoader.prototype.getOptions = function () {
        return this.options;
    };
    ExternalLoader.prototype.executeRequest = function (params, callback, externalLoaderHeaders, body, errorCallback) {
        var _a = this.options, protocol = _a.protocol, host = _a.host, pathname = _a.pathname, method = _a.method;
        if (!host) {
            throw new Error("A host is required for the external loader.");
        }
        if (!pathname) {
            throw new Error("A pathname is required for the external loader.");
        }
        var requestUrl = new URL(protocol + "://" + host + "/" + pathname);
        var jsonpCallback = params.jsonpCallback, requestParams = __rest(params, ["jsonpCallback"]);
        var filteredRequestParams = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterUndefinedObjectValues)(requestParams);
        Object.keys(filteredRequestParams).forEach(function (paramKey) {
            var _a;
            return requestUrl.searchParams.append(paramKey, (_a = filteredRequestParams[paramKey]) !== null && _a !== void 0 ? _a : "");
        });
        if (jsonpCallback) {
            ExternalLoader.runJsonpCallback(requestUrl, callback, jsonpCallback);
            return;
        }
        var headers = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterUndefinedObjectValues)(externalLoaderHeaders || {});
        cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(requestUrl.toString(), {
            headers: headers,
            method: method,
            body: method === "POST" ? JSON.stringify(body) : undefined,
        })
            .then(function (response) {
            if (!response.ok) {
                throw new _error__WEBPACK_IMPORTED_MODULE_2__.default("Received HTTP status code " + response.status + " when attempting geocoding request.", response);
            }
            return response.json();
        })
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .then(function (data) { return callback(data); })
            .catch(function (error) {
            if (errorCallback && error instanceof _error__WEBPACK_IMPORTED_MODULE_2__.default) {
                errorCallback(error);
                return;
            }
            setTimeout(function () {
                throw error;
            });
        });
    };
    ExternalLoader.runJsonpCallback = function (requestUrl, callback, jsonpCallback) {
        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isBrowser)()) {
            throw new Error('"jsonpCallback" parameter can only be used in a browser environment.');
        }
        requestUrl.searchParams.append(jsonpCallback, ExternalLoader.generateJsonpCallback(callback));
        // Create a new script element.
        var scriptElement = document.createElement("script");
        // Set its source to the JSONP API.
        scriptElement.src = requestUrl.toString();
        // Stick the script element in the page <head>.
        document.getElementsByTagName("head")[0].appendChild(scriptElement);
    };
    /**
     * Generates randomly-named function to use as a callback for JSONP requests.
     * @see https://github.com/OscarGodson/JSONP
     */
    ExternalLoader.generateJsonpCallback = function (callback) {
        // Use timestamp + a random factor to account for a lot of requests in a short time.
        // e.g. jsonp1394571775161.
        var timestamp = Date.now();
        var generatedFunction = "jsonp" + Math.round(timestamp + Math.random() * 1000001);
        // Generate the temp JSONP function using the name above.
        // First, call the function the user defined in the callback param [callback(json)].
        // Then delete the generated function from the window [delete window[generatedFunction]].
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window[generatedFunction] = function (json) {
            callback(json);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            delete window[generatedFunction];
        };
        return generatedFunction;
    };
    return ExternalLoader;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExternalLoader);


/***/ }),

/***/ "./src/GeoJsonDumper.ts":
/*!******************************!*\
  !*** ./src/GeoJsonDumper.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var GeoJsonDumper = /** @class */ (function () {
    function GeoJsonDumper() {
    }
    GeoJsonDumper.dump = function (geocoded) {
        var result = GeoJsonDumper.baseGeoJson;
        var _a = geocoded.toObject(), coordinates = _a.coordinates, bounds = _a.bounds, adminLevels = _a.adminLevels, geocodedProperties = __rest(_a, ["coordinates", "bounds", "adminLevels"]);
        var properties = __assign({}, geocodedProperties);
        Object.keys(properties).forEach(function (property) {
            return properties[property] === undefined && delete properties[property];
        });
        if (adminLevels && adminLevels.length > 0) {
            properties = __assign(__assign({}, properties), { adminLevels: adminLevels.map(function (adminLevel) { return adminLevel.toObject(); }) });
        }
        result = __assign(__assign({}, result), { properties: properties });
        if (coordinates) {
            result = __assign(__assign({}, result), {
                geometry: __assign(__assign({}, result.geometry), { type: "Point", coordinates: [
                        parseFloat(coordinates.longitude.toString()),
                        parseFloat(coordinates.latitude.toString()),
                    ] }),
            });
        }
        if (bounds) {
            result = __assign(__assign({}, result), { bbox: [
                    parseFloat(bounds.longitudeSW.toString()),
                    parseFloat(bounds.latitudeSW.toString()),
                    parseFloat(bounds.longitudeNE.toString()),
                    parseFloat(bounds.latitudeNE.toString()),
                ] });
        }
        return result;
    };
    GeoJsonDumper.baseGeoJson = {
        type: "Feature",
        properties: {},
        geometry: {
            type: "Point",
            coordinates: [0, 0],
        },
    };
    return GeoJsonDumper;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeoJsonDumper);


/***/ }),

/***/ "./src/Geocoded.ts":
/*!*************************!*\
  !*** ./src/Geocoded.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Geocoded = /** @class */ (function () {
    function Geocoded(_a) {
        var coordinates = _a.coordinates, bounds = _a.bounds, formattedAddress = _a.formattedAddress, streetNumber = _a.streetNumber, streetName = _a.streetName, subLocality = _a.subLocality, locality = _a.locality, postalCode = _a.postalCode, region = _a.region, adminLevels = _a.adminLevels, country = _a.country, countryCode = _a.countryCode, timezone = _a.timezone;
        this.coordinates = coordinates;
        this.bounds = bounds;
        this.formattedAddress = formattedAddress;
        this.streetNumber = streetNumber;
        this.streetName = streetName;
        this.subLocality = subLocality;
        this.locality = locality;
        this.postalCode = postalCode;
        this.region = region;
        this.adminLevels = adminLevels || [];
        this.country = country;
        this.countryCode = countryCode;
        this.timezone = timezone;
    }
    Geocoded.create = function (object) {
        return new this(object);
    };
    Geocoded.prototype.toObject = function () {
        return {
            coordinates: this.coordinates,
            bounds: this.bounds,
            formattedAddress: this.formattedAddress,
            streetNumber: this.streetNumber,
            streetName: this.streetName,
            subLocality: this.subLocality,
            locality: this.locality,
            postalCode: this.postalCode,
            region: this.region,
            adminLevels: this.adminLevels,
            country: this.country,
            countryCode: this.countryCode,
            timezone: this.timezone,
        };
    };
    Geocoded.prototype.withBounds = function (bounds) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { bounds: bounds }));
    };
    Geocoded.prototype.withCoordinates = function (coordinates) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { coordinates: coordinates }));
    };
    Geocoded.prototype.getCoordinates = function () {
        return this.coordinates;
    };
    Geocoded.prototype.getBounds = function () {
        return this.bounds;
    };
    Geocoded.prototype.getFormattedAddress = function () {
        return this.formattedAddress;
    };
    Geocoded.prototype.getStreetNumber = function () {
        return this.streetNumber;
    };
    Geocoded.prototype.getStreetName = function () {
        return this.streetName;
    };
    Geocoded.prototype.getSubLocality = function () {
        return this.subLocality;
    };
    Geocoded.prototype.getLocality = function () {
        return this.locality;
    };
    Geocoded.prototype.getPostalCode = function () {
        return this.postalCode;
    };
    Geocoded.prototype.getRegion = function () {
        return this.region;
    };
    Geocoded.prototype.addAdminLevel = function (adminLevel) {
        this.adminLevels.push(adminLevel);
    };
    Geocoded.prototype.getAdminLevels = function () {
        return this.adminLevels;
    };
    Geocoded.prototype.getCountry = function () {
        return this.country;
    };
    Geocoded.prototype.getCountryCode = function () {
        return this.countryCode;
    };
    Geocoded.prototype.getTimezone = function () {
        return this.timezone;
    };
    return Geocoded;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Geocoded);


/***/ }),

/***/ "./src/GeocoderProviderFactory.ts":
/*!****************************************!*\
  !*** ./src/GeocoderProviderFactory.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider */ "./src/provider/bing/BingProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider */ "./src/provider/ChainProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./provider */ "./src/provider/geoplugin/GeoPluginProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./provider */ "./src/provider/googlemaps/GoogleMapsProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider */ "./src/provider/locationiq/LocationIQProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./provider */ "./src/provider/mapbox/MapboxProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./provider */ "./src/provider/mapquest/MapQuestProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./provider */ "./src/provider/nominatim/NominatimProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./provider */ "./src/provider/opencage/OpenCageProvider.ts");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./provider */ "./src/provider/yandex/YandexProvider.ts");
/* harmony import */ var _ExternalLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExternalLoader */ "./src/ExternalLoader.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


var ProviderFactory = /** @class */ (function () {
    function ProviderFactory() {
    }
    /**
     * Creates Geocoder Provider instances.
     * @param options
     *   Either a string representing the registered provider, or an object with the
     *   following settings for instigating providers:
     *     - provider: A string representing the registered provider.
     * @return
     *   An object compatible with ProviderInterface, or undefined if there's not a
     *   registered provider.
     */
    ProviderFactory.createProvider = function (options) {
        var createProviderOptions = __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), (typeof options === "string" ? { provider: options } : options));
        var externalLoader = new _ExternalLoader__WEBPACK_IMPORTED_MODULE_1__.default();
        var provider = createProviderOptions.provider, providerOptions = __rest(createProviderOptions, ["provider"]);
        switch (provider) {
            case "bing":
            case "bingmaps":
            case "microsoft":
                return (new _provider__WEBPACK_IMPORTED_MODULE_2__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_2__.defaultBingProviderOptions), providerOptions)));
            case "chain":
                return new _provider__WEBPACK_IMPORTED_MODULE_3__.default(__assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_3__.defaultChainProviderOptions), providerOptions));
            case "geoplugin":
                return (new _provider__WEBPACK_IMPORTED_MODULE_4__.default(externalLoader, providerOptions));
            case "google":
            case "googlemaps":
                return (new _provider__WEBPACK_IMPORTED_MODULE_5__.default(externalLoader, providerOptions));
            case "locationiq":
                return (new _provider__WEBPACK_IMPORTED_MODULE_6__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_6__.defaultLocationIQProviderOptions), providerOptions)));
            case "mapbox":
                return (new _provider__WEBPACK_IMPORTED_MODULE_7__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_7__.defaultMapboxProviderOptions), providerOptions)));
            case "mapquest":
                return (new _provider__WEBPACK_IMPORTED_MODULE_8__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_8__.defaultMapQuestProviderOptions), providerOptions)));
            case "openstreetmap":
            case "nominatim":
                return (new _provider__WEBPACK_IMPORTED_MODULE_9__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_9__.defaultNominatimProviderOptions), providerOptions)));
            case "opencage":
                return (new _provider__WEBPACK_IMPORTED_MODULE_10__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_10__.defaultOpenCageProviderOptions), providerOptions)));
            case "yandex":
                return (new _provider__WEBPACK_IMPORTED_MODULE_11__.default(externalLoader, __assign(__assign({}, _provider__WEBPACK_IMPORTED_MODULE_11__.defaultYandexProviderOptions), providerOptions)));
            default:
        }
        return undefined;
    };
    return ProviderFactory;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProviderFactory);


/***/ }),

/***/ "./src/UniversalGeocoder.ts":
/*!**********************************!*\
  !*** ./src/UniversalGeocoder.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _GeocoderProviderFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeocoderProviderFactory */ "./src/GeocoderProviderFactory.ts");

var UniversalGeocoder = /** @class */ (function () {
    function UniversalGeocoder() {
        this.version = "0.1.0";
    }
    UniversalGeocoder.createGeocoder = function (options) {
        return _GeocoderProviderFactory__WEBPACK_IMPORTED_MODULE_0__.default.createProvider(options);
    };
    return UniversalGeocoder;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UniversalGeocoder);


/***/ }),

/***/ "./src/error/ResponseError.ts":
/*!************************************!*\
  !*** ./src/error/ResponseError.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ResponseError = /** @class */ (function (_super) {
    __extends(ResponseError, _super);
    function ResponseError(message, response) {
        var _this = _super.call(this, message) || this;
        _this.name = "ResponseError";
        _this.response = response;
        // eslint-disable-next-line no-proto
        _this.__proto__ = ResponseError.prototype;
        return _this;
    }
    ResponseError.prototype.getResponse = function () {
        return this.response;
    };
    return ResponseError;
}(Error));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ResponseError);


/***/ }),

/***/ "./src/provider/ChainProvider.ts":
/*!***************************************!*\
  !*** ./src/provider/ChainProvider.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultChainProviderOptions": () => (/* binding */ defaultChainProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ */ "./src/provider/ProviderHelpers.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var defaultChainProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { providers: [] });
var ChainProvider = /** @class */ (function () {
    function ChainProvider(options) {
        if (options === void 0) { options = defaultChainProviderOptions; }
        this.options = options;
    }
    ChainProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        if (this.options.parallelize || this.options.first) {
            if (!callback) {
                return new Promise(function (resolve, reject) {
                    return _this.geocodeAllProviders(query, function (results) { return resolve(results); }, function (error) { return reject(error); });
                });
            }
            return this.geocodeAllProviders(query, callback, errorCallback);
        }
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.geocodeNextProvider(_this.options.providers, query, function (results) { return resolve(results); }, function (error) { return reject(error); });
            });
        }
        return this.geocodeNextProvider(this.options.providers, query, callback, errorCallback);
    };
    ChainProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        if (this.options.parallelize || this.options.first) {
            if (!reverseCallback) {
                return new Promise(function (resolve, reject) {
                    return _this.geodecodeAllProviders(reverseQuery, function (results) { return resolve(results); }, function (error) { return reject(error); });
                });
            }
            return this.geodecodeAllProviders(reverseQuery, reverseCallback, reverseErrorCallback);
        }
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.geodecodeNextProvider(_this.options.providers, reverseQuery, function (results) { return resolve(results); }, function (error) { return reject(error); });
            });
        }
        return this.geodecodeNextProvider(this.options.providers, reverseQuery, reverseCallback, reverseErrorCallback);
    };
    ChainProvider.prototype.geocodeNextProvider = function (providers, query, callback, errorCallback) {
        var _this = this;
        var provider = providers[0], nextProviders = providers.slice(1);
        var resultCallback = function (results) {
            if (results.length > 0) {
                callback(results);
                return;
            }
            _this.geocodeNextProvider(nextProviders, query, callback, errorCallback);
        };
        var resultErrorCallback = function (responseError) {
            if (errorCallback) {
                errorCallback(responseError);
            }
            if (!errorCallback) {
                // eslint-disable-next-line no-console
                console.error("An error has occurred when geocoding with the provider " + provider.constructor.name, responseError);
            }
            resultCallback([]);
        };
        provider.geocode(query, resultCallback, resultErrorCallback);
    };
    ChainProvider.prototype.geodecodeNextProvider = function (providers, reverseQuery, callback, errorCallback) {
        var _this = this;
        var provider = providers[0], nextProviders = providers.slice(1);
        var resultCallback = function (results) {
            if (results.length > 0) {
                callback(results);
                return;
            }
            _this.geodecodeNextProvider(nextProviders, reverseQuery, callback, errorCallback);
        };
        var resultErrorCallback = function (responseError) {
            if (errorCallback) {
                errorCallback(responseError);
            }
            if (!errorCallback) {
                // eslint-disable-next-line no-console
                console.error("An error has occurred when geodecoding with the provider " + provider.constructor.name, responseError);
            }
            resultCallback([]);
        };
        provider.geodecode(reverseQuery, resultCallback, resultErrorCallback);
    };
    ChainProvider.prototype.geocodeAllProviders = function (query, callback, errorCallback) {
        var _this = this;
        var providerResults = new Map();
        var callbackCalled = false;
        var getProviderResult = function () {
            return _this.options.providers.reduce(function (result, provider) {
                var providerResult = result;
                if (undefined === providerResult && _this.options.first) {
                    providerResult = [];
                }
                if (undefined === providerResult) {
                    return undefined;
                }
                if (providerResult.length > 0) {
                    return providerResult;
                }
                return providerResults.get(provider.constructor.name);
            }, []);
        };
        var resultProviderCallback = function (providerName) { return function (results) {
            providerResults.set(providerName, results);
            var providerResult = getProviderResult();
            if (!callbackCalled && providerResult) {
                callback(providerResult);
                callbackCalled = true;
            }
        }; };
        var resultProviderErrorCallback = function (providerName) { return function (responseError) {
            if (errorCallback) {
                errorCallback(responseError);
            }
            if (!errorCallback) {
                // eslint-disable-next-line no-console
                console.error("An error has occurred when geocoding with the provider " + providerName, responseError);
            }
            resultProviderCallback(providerName)([]);
        }; };
        this.options.providers.forEach(function (provider) {
            var providerName = provider.constructor.name;
            provider.geocode(query, resultProviderCallback(providerName), resultProviderErrorCallback(providerName));
        });
    };
    ChainProvider.prototype.geodecodeAllProviders = function (reverseQuery, callback, errorCallback) {
        var _this = this;
        var providerResults = new Map();
        var callbackCalled = false;
        var getProviderResult = function () {
            return _this.options.providers.reduce(function (result, provider) {
                var providerResult = result;
                if (undefined === providerResult && _this.options.first) {
                    providerResult = [];
                }
                if (undefined === providerResult) {
                    return undefined;
                }
                if (providerResult.length > 0) {
                    return providerResult;
                }
                return providerResults.get(provider.constructor.name);
            }, []);
        };
        var resultProviderCallback = function (providerName) { return function (results) {
            providerResults.set(providerName, results);
            var providerResult = getProviderResult();
            if (!callbackCalled && providerResult) {
                callback(providerResult);
                callbackCalled = true;
            }
        }; };
        var resultProviderErrorCallback = function (providerName) { return function (responseError) {
            if (errorCallback) {
                errorCallback(responseError);
            }
            if (!errorCallback) {
                // eslint-disable-next-line no-console
                console.error("An error has occurred when geodecoding with the provider " + providerName, responseError);
            }
            resultProviderCallback(providerName)([]);
        }; };
        this.options.providers.forEach(function (provider) {
            var providerName = provider.constructor.name;
            provider.geodecode(reverseQuery, resultProviderCallback(providerName), resultProviderErrorCallback(providerName));
        });
    };
    // eslint-disable-next-line class-methods-use-this
    ChainProvider.prototype.executeRequest = function (
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    params, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    callback, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    headers, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    body, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    errorCallback) {
        throw new Error("executeRequest cannot be called directly from the chain provider.");
    };
    return ChainProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChainProvider);


/***/ }),

/***/ "./src/provider/ProviderHelpers.ts":
/*!*****************************************!*\
  !*** ./src/provider/ProviderHelpers.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../query */ "./src/query/GeocodeQuery.ts");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../query */ "./src/query/ReverseQuery.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");


var ProviderHelpers = /** @class */ (function () {
    function ProviderHelpers() {
    }
    ProviderHelpers.getGeocodeQueryFromParameter = function (query, geocodeQuery) {
        if (geocodeQuery === void 0) { geocodeQuery = _query__WEBPACK_IMPORTED_MODULE_0__.default; }
        if (typeof query === "string") {
            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isIpv4)(query) || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isIpv6)(query)) {
                return geocodeQuery.create({ ip: query });
            }
            return geocodeQuery.create({ text: query });
        }
        if (!(query instanceof geocodeQuery)) {
            return geocodeQuery.create(query);
        }
        return query;
    };
    ProviderHelpers.getReverseQueryFromParameters = function (latitudeOrQuery, longitudeOrCallback, reverseQuery) {
        if (reverseQuery === void 0) { reverseQuery = _query__WEBPACK_IMPORTED_MODULE_2__.default; }
        if (typeof latitudeOrQuery === "number" ||
            typeof latitudeOrQuery === "string") {
            if (!(typeof longitudeOrCallback === "number" ||
                typeof longitudeOrCallback === "string")) {
                throw new Error("The second parameter of geodecode must be a longitude if the first one is a latitude");
            }
            return reverseQuery.create({
                coordinates: {
                    latitude: latitudeOrQuery,
                    longitude: longitudeOrCallback,
                },
            });
        }
        if (!(latitudeOrQuery instanceof reverseQuery)) {
            return reverseQuery.create(latitudeOrQuery);
        }
        return latitudeOrQuery;
    };
    ProviderHelpers.getCallbackFromParameters = function (longitudeOrCallback, callbackOrErrorCallback) {
        if (!(typeof longitudeOrCallback === "number" ||
            typeof longitudeOrCallback === "string")) {
            return longitudeOrCallback;
        }
        if (callbackOrErrorCallback) {
            return callbackOrErrorCallback;
        }
        return undefined;
    };
    ProviderHelpers.getErrorCallbackFromParameters = function (longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        if (errorCallback) {
            return errorCallback;
        }
        if (typeof longitudeOrCallback === "number" ||
            typeof longitudeOrCallback === "string") {
            return undefined;
        }
        return callbackOrErrorCallback;
    };
    return ProviderHelpers;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProviderHelpers);


/***/ }),

/***/ "./src/provider/ProviderInterface.ts":
/*!*******************************************!*\
  !*** ./src/provider/ProviderInterface.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_RESULT_LIMIT": () => (/* binding */ DEFAULT_RESULT_LIMIT),
/* harmony export */   "defaultProviderOptions": () => (/* binding */ defaultProviderOptions)
/* harmony export */ });
var DEFAULT_RESULT_LIMIT = 5;
var defaultProviderOptions = {
    useSsl: false,
    useJsonp: false,
};


/***/ }),

/***/ "./src/provider/bing/BingGeocoded.ts":
/*!*******************************************!*\
  !*** ./src/provider/bing/BingGeocoded.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var BingGeocoded = /** @class */ (function (_super) {
    __extends(BingGeocoded, _super);
    function BingGeocoded(_a) {
        var attribution = _a.attribution, precision = _a.precision, geocodedObject = __rest(_a, ["attribution", "precision"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.attribution = attribution;
        _this.precision = precision;
        return _this;
    }
    BingGeocoded.create = function (object) {
        return new this(object);
    };
    BingGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { attribution: this.attribution, precision: this.precision });
    };
    BingGeocoded.prototype.withAttribution = function (attribution) {
        return new BingGeocoded(__assign(__assign({}, this.toObject()), { attribution: attribution }));
    };
    BingGeocoded.prototype.getAttribution = function () {
        return this.attribution;
    };
    BingGeocoded.prototype.withPrecision = function (precision) {
        return new BingGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    BingGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    return BingGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BingGeocoded);


/***/ }),

/***/ "./src/provider/bing/BingProvider.ts":
/*!*******************************************!*\
  !*** ./src/provider/bing/BingProvider.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultBingProviderOptions": () => (/* binding */ defaultBingProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/bing/BingGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultBingProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "" });
var BingProvider = /** @class */ (function () {
    function BingProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultBingProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultBingProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the Bing provider. Please add it in the "apiKey" option.');
        }
    }
    BingProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query);
        if (geocodeQuery.getIp()) {
            throw new Error("The Bing provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "dev.virtualearth.net",
            pathname: "REST/v1/Locations/" + geocodeQuery.getText(),
        });
        var params = this.withCommonParams({
            maxRes: geocodeQuery.getLimit()
                ? geocodeQuery.getLimit().toString()
                : undefined,
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    BingProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "dev.virtualearth.net",
            pathname: "REST/v1/Locations/" + reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
        });
        var params = this.withCommonParams({}, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    BingProvider.prototype.withCommonParams = function (params, query) {
        return __assign(__assign({}, params), { key: this.options.apiKey, incl: "ciso2", c: query.getLocale(), jsonpCallback: this.options.useJsonp ? "jsonp" : undefined });
    };
    BingProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.resourceSets[0].resources.map(function (result) {
                return BingProvider.mapToGeocoded(result, data.copyright);
            }));
        }, headers, body, function (error) {
            var response = error.getResponse();
            response.json().then(function (data) {
                var errorMessage = data.errorDetails && data.errorDetails.length > 0
                    ? data.errorDetails[0]
                    : data.statusDescription || "";
                if (errorCallback) {
                    errorCallback(new _error__WEBPACK_IMPORTED_MODULE_2__.default(errorMessage, data));
                    return;
                }
                setTimeout(function () {
                    throw new Error(errorMessage);
                });
            });
        });
    };
    BingProvider.mapToGeocoded = function (result, attribution) {
        var latitude = result.point.coordinates[0];
        var longitude = result.point.coordinates[1];
        var formattedAddress = result.address.formattedAddress;
        var streetName = result.address.addressLine;
        var _a = result.address, locality = _a.locality, postalCode = _a.postalCode;
        var region = result.address.adminDistrict;
        var country = result.address.countryRegion;
        var countryCode = result.address.countryRegionIso2;
        var precision = result.confidence;
        var geocoded = ___WEBPACK_IMPORTED_MODULE_3__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            formattedAddress: formattedAddress,
            streetName: streetName,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            attribution: attribution,
            precision: precision,
        });
        geocoded = geocoded.withBounds({
            latitudeSW: result.bbox[0],
            longitudeSW: result.bbox[1],
            latitudeNE: result.bbox[2],
            longitudeNE: result.bbox[3],
        });
        var adminLevels = [
            "adminDistrict",
            "adminDistrict2",
        ];
        adminLevels.forEach(function (adminLevel, level) {
            if (result.address[adminLevel]) {
                geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_4__.default.create({
                    level: level + 1,
                    name: result.address[adminLevel] || "",
                }));
            }
        });
        return geocoded;
    };
    return BingProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BingProvider);


/***/ }),

/***/ "./src/provider/bing/index.ts":
/*!************************************!*\
  !*** ./src/provider/bing/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BingGeocoded": () => (/* reexport safe */ _BingGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "BingProvider": () => (/* reexport safe */ _BingProvider__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "defaultBingProviderOptions": () => (/* reexport safe */ _BingProvider__WEBPACK_IMPORTED_MODULE_1__.defaultBingProviderOptions)
/* harmony export */ });
/* harmony import */ var _BingGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BingGeocoded */ "./src/provider/bing/BingGeocoded.ts");
/* harmony import */ var _BingProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BingProvider */ "./src/provider/bing/BingProvider.ts");





/***/ }),

/***/ "./src/provider/geoplugin/GeoPluginGeocoded.ts":
/*!*****************************************************!*\
  !*** ./src/provider/geoplugin/GeoPluginGeocoded.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var GeoPluginGeocoded = /** @class */ (function (_super) {
    __extends(GeoPluginGeocoded, _super);
    function GeoPluginGeocoded(_a) {
        var attribution = _a.attribution, geocodedObject = __rest(_a, ["attribution"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.attribution = attribution;
        return _this;
    }
    GeoPluginGeocoded.create = function (object) {
        return new this(object);
    };
    GeoPluginGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { attribution: this.attribution });
    };
    GeoPluginGeocoded.prototype.withAttribution = function (attribution) {
        return new GeoPluginGeocoded(__assign(__assign({}, this.toObject()), { attribution: attribution }));
    };
    GeoPluginGeocoded.prototype.getAttribution = function () {
        return this.attribution;
    };
    return GeoPluginGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeoPluginGeocoded);


/***/ }),

/***/ "./src/provider/geoplugin/GeoPluginProvider.ts":
/*!*****************************************************!*\
  !*** ./src/provider/geoplugin/GeoPluginProvider.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/geoplugin/GeoPluginGeocoded.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var GeoPluginProvider = /** @class */ (function () {
    function GeoPluginProvider(_externalLoader, options) {
        if (options === void 0) { options = ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), options);
    }
    GeoPluginProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query);
        if (geocodeQuery.getText()) {
            throw new Error("The GeoPlugin provider does not support location geocoding, only IP geolocation.");
        }
        if (["127.0.0.1", "::1"].includes(geocodeQuery.getIp() || "")) {
            var geocoded_1 = ___WEBPACK_IMPORTED_MODULE_2__.default.create({
                locality: "localhost",
                country: "localhost",
            });
            if (!callback) {
                return new Promise(function (resolve) { return resolve([geocoded_1]); });
            }
            return callback([geocoded_1]);
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "www.geoplugin.net",
            pathname: "json.gp",
        });
        var params = {
            ip: geocodeQuery.getIp() || "",
        };
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    // eslint-disable-next-line class-methods-use-this
    GeoPluginProvider.prototype.geodecode = function (
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    latitudeOrQuery, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    longitudeOrCallback, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    callbackOrErrorCallback, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    errorCallback) {
        throw new Error("The GeoPlugin provider does not support reverse geocoding.");
    };
    GeoPluginProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            if (![200, 206].includes(data.geoplugin_status)) {
                var errorMessage_1 = "An error has occurred. Status: " + data.geoplugin_status + ".";
                if (errorCallback) {
                    errorCallback(new _error__WEBPACK_IMPORTED_MODULE_3__.default(errorMessage_1, data));
                    return;
                }
                setTimeout(function () {
                    throw new Error(errorMessage_1);
                });
                return;
            }
            callback([GeoPluginProvider.mapToGeocoded(data)]);
        }, headers, body, errorCallback);
    };
    GeoPluginProvider.mapToGeocoded = function (result) {
        var latitude = parseFloat(result.geoplugin_latitude);
        var longitude = parseFloat(result.geoplugin_longitude);
        var locality = result.geoplugin_city || undefined;
        var region = result.geoplugin_region || undefined;
        var country = result.geoplugin_countryName || undefined;
        var countryCode = result.geoplugin_countryCode || undefined;
        var timezone = result.geoplugin_timezone || undefined;
        var adminLevels = [];
        var attribution = result.geoplugin_credit || undefined;
        if (result.geoplugin_regionName) {
            adminLevels.push(_AdminLevel__WEBPACK_IMPORTED_MODULE_4__.default.create({
                level: _AdminLevel__WEBPACK_IMPORTED_MODULE_4__.ADMIN_LEVEL_CODES.STATE_CODE,
                name: result.geoplugin_regionName,
                code: result.geoplugin_regionCode || undefined,
            }));
        }
        var geocoded = ___WEBPACK_IMPORTED_MODULE_2__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            locality: locality,
            region: region,
            adminLevels: adminLevels,
            country: country,
            countryCode: countryCode,
            timezone: timezone,
            attribution: attribution,
        });
        return geocoded;
    };
    return GeoPluginProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeoPluginProvider);


/***/ }),

/***/ "./src/provider/geoplugin/index.ts":
/*!*****************************************!*\
  !*** ./src/provider/geoplugin/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeoPluginGeocoded": () => (/* reexport safe */ _GeoPluginGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "GeoPluginProvider": () => (/* reexport safe */ _GeoPluginProvider__WEBPACK_IMPORTED_MODULE_1__.default)
/* harmony export */ });
/* harmony import */ var _GeoPluginGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeoPluginGeocoded */ "./src/provider/geoplugin/GeoPluginGeocoded.ts");
/* harmony import */ var _GeoPluginProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeoPluginProvider */ "./src/provider/geoplugin/GeoPluginProvider.ts");





/***/ }),

/***/ "./src/provider/googlemaps/GoogleMapsGeocodeQuery.ts":
/*!***********************************************************!*\
  !*** ./src/provider/googlemaps/GoogleMapsGeocodeQuery.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var GoogleMapsGeocodeQuery = /** @class */ (function (_super) {
    __extends(GoogleMapsGeocodeQuery, _super);
    function GoogleMapsGeocodeQuery(_a) {
        var countryCodes = _a.countryCodes, components = _a.components, channel = _a.channel, geocodeQueryObject = __rest(_a, ["countryCodes", "components", "channel"]);
        var _this = _super.call(this, geocodeQueryObject) || this;
        if (countryCodes && countryCodes.length !== 1) {
            throw new Error('The "countryCodes" parameter must have only one country code top-level domain.');
        }
        _this.countryCodes = countryCodes;
        _this.components = components;
        _this.channel = channel;
        return _this;
    }
    GoogleMapsGeocodeQuery.create = function (object) {
        return new this(object);
    };
    GoogleMapsGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, components: this.components, channel: this.channel });
    };
    GoogleMapsGeocodeQuery.prototype.withCountryCodes = function (countryCodes) {
        return new GoogleMapsGeocodeQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    GoogleMapsGeocodeQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    GoogleMapsGeocodeQuery.prototype.withComponents = function (components) {
        return new GoogleMapsGeocodeQuery(__assign(__assign({}, this.toObject()), { components: components }));
    };
    GoogleMapsGeocodeQuery.prototype.getComponents = function () {
        return this.components;
    };
    GoogleMapsGeocodeQuery.prototype.withChannel = function (channel) {
        return new GoogleMapsGeocodeQuery(__assign(__assign({}, this.toObject()), { channel: channel }));
    };
    GoogleMapsGeocodeQuery.prototype.getChannel = function () {
        return this.channel;
    };
    return GoogleMapsGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GoogleMapsGeocodeQuery);


/***/ }),

/***/ "./src/provider/googlemaps/GoogleMapsGeocoded.ts":
/*!*******************************************************!*\
  !*** ./src/provider/googlemaps/GoogleMapsGeocoded.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var GoogleMapsGeocoded = /** @class */ (function (_super) {
    __extends(GoogleMapsGeocoded, _super);
    function GoogleMapsGeocoded(_a) {
        var placeId = _a.placeId, partialMatch = _a.partialMatch, types = _a.types, precision = _a.precision, streetAddress = _a.streetAddress, intersection = _a.intersection, political = _a.political, colloquialArea = _a.colloquialArea, ward = _a.ward, neighborhood = _a.neighborhood, premise = _a.premise, subpremise = _a.subpremise, naturalFeature = _a.naturalFeature, airport = _a.airport, park = _a.park, pointOfInterest = _a.pointOfInterest, establishment = _a.establishment, postalCodeSuffix = _a.postalCodeSuffix, subLocalityLevels = _a.subLocalityLevels, geocodedObject = __rest(_a, ["placeId", "partialMatch", "types", "precision", "streetAddress", "intersection", "political", "colloquialArea", "ward", "neighborhood", "premise", "subpremise", "naturalFeature", "airport", "park", "pointOfInterest", "establishment", "postalCodeSuffix", "subLocalityLevels"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.placeId = placeId;
        _this.partialMatch = partialMatch;
        _this.types = types;
        _this.precision = precision;
        _this.streetAddress = streetAddress;
        _this.intersection = intersection;
        _this.political = political;
        _this.colloquialArea = colloquialArea;
        _this.ward = ward;
        _this.neighborhood = neighborhood;
        _this.premise = premise;
        _this.subpremise = subpremise;
        _this.naturalFeature = naturalFeature;
        _this.airport = airport;
        _this.park = park;
        _this.pointOfInterest = pointOfInterest;
        _this.establishment = establishment;
        _this.postalCodeSuffix = postalCodeSuffix;
        _this.subLocalityLevels = subLocalityLevels || [];
        return _this;
    }
    GoogleMapsGeocoded.create = function (object) {
        return new this(object);
    };
    GoogleMapsGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { placeId: this.placeId, partialMatch: this.partialMatch, types: this.types, precision: this.precision, streetAddress: this.streetAddress, intersection: this.intersection, political: this.political, colloquialArea: this.colloquialArea, ward: this.ward, neighborhood: this.neighborhood, premise: this.premise, subpremise: this.subpremise, naturalFeature: this.naturalFeature, airport: this.airport, park: this.park, pointOfInterest: this.pointOfInterest, establishment: this.establishment, postalCodeSuffix: this.postalCodeSuffix, subLocalityLevels: this.subLocalityLevels });
    };
    GoogleMapsGeocoded.prototype.withPlaceId = function (placeId) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { placeId: placeId }));
    };
    GoogleMapsGeocoded.prototype.getPlaceId = function () {
        return this.placeId;
    };
    GoogleMapsGeocoded.prototype.withPartialMatch = function (partialMatch) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { partialMatch: partialMatch }));
    };
    GoogleMapsGeocoded.prototype.isPartialMatch = function () {
        return this.partialMatch;
    };
    GoogleMapsGeocoded.prototype.withTypes = function (types) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { types: types }));
    };
    GoogleMapsGeocoded.prototype.getTypes = function () {
        return this.types;
    };
    GoogleMapsGeocoded.prototype.withPrecision = function (precision) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    GoogleMapsGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    GoogleMapsGeocoded.prototype.withStreetAddress = function (streetAddress) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { streetAddress: streetAddress }));
    };
    GoogleMapsGeocoded.prototype.getStreetAddress = function () {
        return this.streetAddress;
    };
    GoogleMapsGeocoded.prototype.withIntersection = function (intersection) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { intersection: intersection }));
    };
    GoogleMapsGeocoded.prototype.getIntersection = function () {
        return this.intersection;
    };
    GoogleMapsGeocoded.prototype.withPolitical = function (political) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { political: political }));
    };
    GoogleMapsGeocoded.prototype.getPolitical = function () {
        return this.political;
    };
    GoogleMapsGeocoded.prototype.withColloquialArea = function (colloquialArea) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { colloquialArea: colloquialArea }));
    };
    GoogleMapsGeocoded.prototype.getColloquialArea = function () {
        return this.colloquialArea;
    };
    GoogleMapsGeocoded.prototype.withWard = function (ward) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { ward: ward }));
    };
    GoogleMapsGeocoded.prototype.getWard = function () {
        return this.ward;
    };
    GoogleMapsGeocoded.prototype.withNeighborhood = function (neighborhood) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { neighborhood: neighborhood }));
    };
    GoogleMapsGeocoded.prototype.getNeighborhood = function () {
        return this.neighborhood;
    };
    GoogleMapsGeocoded.prototype.withPremise = function (premise) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { premise: premise }));
    };
    GoogleMapsGeocoded.prototype.getPremise = function () {
        return this.premise;
    };
    GoogleMapsGeocoded.prototype.withSubpremise = function (subpremise) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { subpremise: subpremise }));
    };
    GoogleMapsGeocoded.prototype.getSubpremise = function () {
        return this.subpremise;
    };
    GoogleMapsGeocoded.prototype.withNaturalFeature = function (naturalFeature) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { naturalFeature: naturalFeature }));
    };
    GoogleMapsGeocoded.prototype.getNaturalFeature = function () {
        return this.naturalFeature;
    };
    GoogleMapsGeocoded.prototype.withAirport = function (airport) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { airport: airport }));
    };
    GoogleMapsGeocoded.prototype.getAirport = function () {
        return this.airport;
    };
    GoogleMapsGeocoded.prototype.withPark = function (park) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { park: park }));
    };
    GoogleMapsGeocoded.prototype.getPark = function () {
        return this.park;
    };
    GoogleMapsGeocoded.prototype.withPointOfInterest = function (pointOfInterest) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { pointOfInterest: pointOfInterest }));
    };
    GoogleMapsGeocoded.prototype.getPointOfInterest = function () {
        return this.pointOfInterest;
    };
    GoogleMapsGeocoded.prototype.withEstablishment = function (establishment) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { establishment: establishment }));
    };
    GoogleMapsGeocoded.prototype.getEstablishment = function () {
        return this.establishment;
    };
    GoogleMapsGeocoded.prototype.withPostalCodeSuffix = function (postalCodeSuffix) {
        return new GoogleMapsGeocoded(__assign(__assign({}, this.toObject()), { postalCodeSuffix: postalCodeSuffix }));
    };
    GoogleMapsGeocoded.prototype.getPostalCodeSuffix = function () {
        return this.postalCodeSuffix;
    };
    GoogleMapsGeocoded.prototype.addSubLocalityLevel = function (subLocalityLevel) {
        this.subLocalityLevels.push(subLocalityLevel);
    };
    GoogleMapsGeocoded.prototype.getSubLocalityLevels = function () {
        return this.subLocalityLevels;
    };
    return GoogleMapsGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GoogleMapsGeocoded);


/***/ }),

/***/ "./src/provider/googlemaps/GoogleMapsProvider.ts":
/*!*******************************************************!*\
  !*** ./src/provider/googlemaps/GoogleMapsProvider.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/googlemaps/GoogleMapsGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./.. */ "./src/provider/googlemaps/GoogleMapsReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./.. */ "./src/provider/googlemaps/GoogleMapsGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils */ "./src/utils.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




var GoogleMapsProvider = /** @class */ (function () {
    function GoogleMapsProvider(_externalLoader, options) {
        if (options === void 0) { options = ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), options);
        if (!this.options.apiKey && !this.options.clientId) {
            throw new Error('An API key or a client ID is required for the Google Maps provider. Please add it in the "apiKey" or the "clientId" option.');
        }
        if (this.options.clientId && !this.options.secret) {
            throw new Error('An URL signing secret is required if you use a client ID (Premium only). Please add it in the "secret" option.');
        }
        if (this.options.secret && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isBrowser)()) {
            throw new Error('The "secret" option cannot be used in a browser environment.');
        }
        if (this.options.countryCodes && this.options.countryCodes.length !== 1) {
            throw new Error('The "countryCodes" option must have only one country code top-level domain.');
        }
    }
    GoogleMapsProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_2__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_3__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The GoogleMaps provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "maps.googleapis.com",
            pathname: "maps/api/geocode/json",
        });
        var params = this.withCommonParams({
            address: geocodeQuery.getText(),
            bounds: geocodeQuery.getBounds()
                ? ((_a = geocodeQuery.getBounds()) === null || _a === void 0 ? void 0 : _a.latitudeSW) + "," + ((_b = geocodeQuery.getBounds()) === null || _b === void 0 ? void 0 : _b.longitudeSW) + "|" + ((_c = geocodeQuery.getBounds()) === null || _c === void 0 ? void 0 : _c.latitudeNE) + "," + ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.longitudeNE)
                : undefined,
            components: geocodeQuery.getComponents()
                ? (_e = geocodeQuery
                    .getComponents()) === null || _e === void 0 ? void 0 : _e.map(function (component) { return component.name + ":" + component.value; }).join("|")
                : undefined,
            region: geocodeQuery.getCountryCodes()
                ? (_f = geocodeQuery.getCountryCodes()) === null || _f === void 0 ? void 0 : _f.join(",")
                : (_g = this.options.countryCodes) === null || _g === void 0 ? void 0 : _g.join(","),
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    GoogleMapsProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var _a, _b;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_2__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_4__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_2__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_2__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "maps.googleapis.com",
            pathname: "maps/api/geocode/json",
        });
        var params = this.withCommonParams({
            latlng: reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
            result_type: reverseQuery.getTypes()
                ? (_a = reverseQuery.getTypes()) === null || _a === void 0 ? void 0 : _a.join("|")
                : undefined,
            location_type: reverseQuery.getPrecisions()
                ? (_b = reverseQuery.getPrecisions()) === null || _b === void 0 ? void 0 : _b.join("|")
                : undefined,
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    GoogleMapsProvider.prototype.withCommonParams = function (params, query) {
        var withCommonParams = __assign(__assign({}, params), { key: this.options.apiKey, client: this.options.clientId, channel: query.getChannel(), language: query.getLocale(), limit: query.getLimit().toString() });
        if (this.options.secret) {
            withCommonParams = __assign(__assign({}, withCommonParams), { signature: GoogleMapsProvider.signQuery(this.options.secret, this.externalLoader.getOptions().pathname || "", withCommonParams) });
        }
        return withCommonParams;
    };
    GoogleMapsProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        var limit = params.limit, externalLoaderParams = __rest(params, ["limit"]);
        this.externalLoader.executeRequest(externalLoaderParams, function (data) {
            var errorMessage;
            switch (data.status) {
                case "REQUEST_DENIED":
                    errorMessage = "Request has been denied";
                    if (data.error_message) {
                        errorMessage += ": " + data.error_message;
                    }
                    break;
                case "OVER_QUERY_LIMIT":
                    errorMessage =
                        "Exceeded daily quota when attempting geocoding request";
                    if (data.error_message) {
                        errorMessage += ": " + data.error_message;
                    }
                    break;
                case "OVER_DAILY_LIMIT":
                    errorMessage = "API usage has been limited";
                    if (data.error_message) {
                        errorMessage += ": " + data.error_message;
                    }
                    break;
                case "INVALID_REQUEST":
                    errorMessage = "The request is invalid";
                    if (data.error_message) {
                        errorMessage += ": " + data.error_message;
                    }
                    break;
                case "UNKNOWN_ERROR":
                    errorMessage = "Unknown error";
                    if (data.error_message) {
                        errorMessage += ": " + data.error_message;
                    }
                    break;
                default:
                // Intentionnaly left empty
            }
            if (errorMessage && errorCallback) {
                errorCallback(new _error__WEBPACK_IMPORTED_MODULE_5__.default(errorMessage, data));
                return;
            }
            if (errorMessage) {
                setTimeout(function () {
                    throw new Error(errorMessage);
                });
                return;
            }
            var results = data.results;
            var resultsToRemove = results.length - parseInt(limit || results.length.toString(), 10);
            if (resultsToRemove > 0) {
                results.splice(-resultsToRemove);
            }
            callback(results.map(function (result) {
                return GoogleMapsProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    GoogleMapsProvider.mapToGeocoded = function (result) {
        var latitude = result.geometry.location.lat;
        var longitude = result.geometry.location.lng;
        var formattedAddress = result.formatted_address;
        var streetNumber;
        var streetName;
        var subLocality;
        var locality;
        var postalCode;
        var region;
        var country;
        var countryCode;
        var adminLevels = [];
        var placeId = result.place_id;
        var partialMatch = result.partial_match;
        var types = result.types;
        var precision = result.geometry.location_type;
        var streetAddress;
        var intersection;
        var political;
        var colloquialArea;
        var ward;
        var neighborhood;
        var premise;
        var subpremise;
        var naturalFeature;
        var airport;
        var park;
        var pointOfInterest;
        var establishment;
        var postalCodeSuffix;
        var subLocalityLevels = [];
        result.address_components.forEach(function (addressComponent) {
            addressComponent.types.forEach(function (type) {
                switch (type) {
                    case "street_number":
                        streetNumber = addressComponent.long_name;
                        break;
                    case "route":
                        streetName = addressComponent.long_name;
                        break;
                    case "sublocality":
                        subLocality = addressComponent.long_name;
                        break;
                    case "locality":
                    case "postal_town":
                        locality = addressComponent.long_name;
                        break;
                    case "postal_code":
                        postalCode = addressComponent.long_name;
                        break;
                    case "administrative_area_level_1":
                    case "administrative_area_level_2":
                    case "administrative_area_level_3":
                    case "administrative_area_level_4":
                    case "administrative_area_level_5":
                        if (type === "administrative_area_level_1") {
                            region = addressComponent.long_name;
                        }
                        adminLevels.push(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                            level: parseInt(type.substr(-1), 10),
                            name: addressComponent.long_name,
                            code: addressComponent.short_name,
                        }));
                        break;
                    case "sublocality_level_1":
                    case "sublocality_level_2":
                    case "sublocality_level_3":
                    case "sublocality_level_4":
                    case "sublocality_level_5":
                        subLocalityLevels.push(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                            level: parseInt(type.substr(-1), 10),
                            name: addressComponent.long_name,
                            code: addressComponent.short_name,
                        }));
                        break;
                    case "country":
                        country = addressComponent.long_name;
                        countryCode = addressComponent.short_name;
                        break;
                    case "street_address":
                        streetAddress = addressComponent.long_name;
                        break;
                    case "intersection":
                        intersection = addressComponent.long_name;
                        break;
                    case "political":
                        political = addressComponent.long_name;
                        break;
                    case "colloquial_area":
                        colloquialArea = addressComponent.long_name;
                        break;
                    case "ward":
                        ward = addressComponent.long_name;
                        break;
                    case "neighborhood":
                        neighborhood = addressComponent.long_name;
                        break;
                    case "premise":
                        premise = addressComponent.long_name;
                        break;
                    case "subpremise":
                        subpremise = addressComponent.long_name;
                        break;
                    case "natural_feature":
                        naturalFeature = addressComponent.long_name;
                        break;
                    case "airport":
                        airport = addressComponent.long_name;
                        break;
                    case "park":
                        park = addressComponent.long_name;
                        break;
                    case "point_of_interest":
                        pointOfInterest = addressComponent.long_name;
                        break;
                    case "establishment":
                        establishment = addressComponent.long_name;
                        break;
                    case "postal_code_suffix":
                        postalCodeSuffix = addressComponent.long_name;
                        break;
                    default:
                }
            });
        });
        var geocoded = ___WEBPACK_IMPORTED_MODULE_7__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            formattedAddress: formattedAddress,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            adminLevels: adminLevels,
            placeId: placeId,
            partialMatch: partialMatch,
            types: types,
            precision: precision,
            streetAddress: streetAddress,
            intersection: intersection,
            political: political,
            colloquialArea: colloquialArea,
            ward: ward,
            neighborhood: neighborhood,
            premise: premise,
            subpremise: subpremise,
            naturalFeature: naturalFeature,
            airport: airport,
            park: park,
            pointOfInterest: pointOfInterest,
            establishment: establishment,
            postalCodeSuffix: postalCodeSuffix,
            subLocalityLevels: subLocalityLevels,
        });
        if (result.geometry.bounds) {
            var bounds = result.geometry.bounds;
            geocoded = geocoded.withBounds({
                latitudeSW: bounds.southwest.lat,
                longitudeSW: bounds.southwest.lng,
                latitudeNE: bounds.northeast.lat,
                longitudeNE: bounds.northeast.lng,
            });
        }
        else if (result.geometry.viewport) {
            var viewport = result.geometry.viewport;
            geocoded = geocoded.withBounds({
                latitudeSW: viewport.southwest.lat,
                longitudeSW: viewport.southwest.lng,
                latitudeNE: viewport.northeast.lat,
                longitudeNE: viewport.northeast.lng,
            });
        }
        else if (precision === "ROOFTOP") {
            // Fake bounds
            geocoded = geocoded.withBounds({
                latitudeSW: latitude,
                longitudeSW: longitude,
                latitudeNE: latitude,
                longitudeNE: longitude,
            });
        }
        return geocoded;
    };
    GoogleMapsProvider.signQuery = function (secret, pathname, params) {
        var crypto = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getRequireFunc)()("crypto");
        var filteredRequestParams = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterUndefinedObjectValues)(params);
        var safeSecret = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.decodeBase64)((0,_utils__WEBPACK_IMPORTED_MODULE_1__.decodeUrlSafeBase64)(secret));
        var toSign = pathname + "?" + new URLSearchParams(filteredRequestParams).toString();
        var hashedSignature = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.encodeUrlSafeBase64)(crypto.createHmac("sha1", safeSecret).update(toSign).digest("base64"));
        return hashedSignature;
    };
    return GoogleMapsProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GoogleMapsProvider);


/***/ }),

/***/ "./src/provider/googlemaps/GoogleMapsReverseQuery.ts":
/*!***********************************************************!*\
  !*** ./src/provider/googlemaps/GoogleMapsReverseQuery.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var GoogleMapsReverseQuery = /** @class */ (function (_super) {
    __extends(GoogleMapsReverseQuery, _super);
    function GoogleMapsReverseQuery(_a) {
        var types = _a.types, precisions = _a.precisions, channel = _a.channel, reverseQueryObject = __rest(_a, ["types", "precisions", "channel"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        _this.types = types;
        _this.precisions = precisions;
        _this.channel = channel;
        return _this;
    }
    GoogleMapsReverseQuery.create = function (object) {
        return new this(object);
    };
    GoogleMapsReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { types: this.types, precisions: this.precisions, channel: this.channel });
    };
    GoogleMapsReverseQuery.prototype.withTypes = function (types) {
        return new GoogleMapsReverseQuery(__assign(__assign({}, this.toObject()), { types: types }));
    };
    GoogleMapsReverseQuery.prototype.getTypes = function () {
        return this.types;
    };
    GoogleMapsReverseQuery.prototype.withPrecisions = function (precisions) {
        return new GoogleMapsReverseQuery(__assign(__assign({}, this.toObject()), { precisions: precisions }));
    };
    GoogleMapsReverseQuery.prototype.getPrecisions = function () {
        return this.precisions;
    };
    GoogleMapsReverseQuery.prototype.withChannel = function (channel) {
        return new GoogleMapsReverseQuery(__assign(__assign({}, this.toObject()), { channel: channel }));
    };
    GoogleMapsReverseQuery.prototype.getChannel = function () {
        return this.channel;
    };
    return GoogleMapsReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GoogleMapsReverseQuery);


/***/ }),

/***/ "./src/provider/googlemaps/index.ts":
/*!******************************************!*\
  !*** ./src/provider/googlemaps/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoogleMapsGeocoded": () => (/* reexport safe */ _GoogleMapsGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "GoogleMapsGeocodeQuery": () => (/* reexport safe */ _GoogleMapsGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "GoogleMapsProvider": () => (/* reexport safe */ _GoogleMapsProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "GoogleMapsReverseQuery": () => (/* reexport safe */ _GoogleMapsReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _GoogleMapsGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoogleMapsGeocoded */ "./src/provider/googlemaps/GoogleMapsGeocoded.ts");
/* harmony import */ var _GoogleMapsGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GoogleMapsGeocodeQuery */ "./src/provider/googlemaps/GoogleMapsGeocodeQuery.ts");
/* harmony import */ var _GoogleMapsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GoogleMapsProvider */ "./src/provider/googlemaps/GoogleMapsProvider.ts");
/* harmony import */ var _GoogleMapsReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GoogleMapsReverseQuery */ "./src/provider/googlemaps/GoogleMapsReverseQuery.ts");









/***/ }),

/***/ "./src/provider/index.ts":
/*!*******************************!*\
  !*** ./src/provider/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProviderHelpers": () => (/* reexport safe */ _ProviderHelpers__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "DEFAULT_RESULT_LIMIT": () => (/* reexport safe */ _ProviderInterface__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RESULT_LIMIT),
/* harmony export */   "defaultProviderOptions": () => (/* reexport safe */ _ProviderInterface__WEBPACK_IMPORTED_MODULE_1__.defaultProviderOptions),
/* harmony export */   "ChainProvider": () => (/* reexport safe */ _ChainProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "defaultChainProviderOptions": () => (/* reexport safe */ _ChainProvider__WEBPACK_IMPORTED_MODULE_2__.defaultChainProviderOptions),
/* harmony export */   "BingGeocoded": () => (/* reexport safe */ _bing__WEBPACK_IMPORTED_MODULE_3__.BingGeocoded),
/* harmony export */   "BingProvider": () => (/* reexport safe */ _bing__WEBPACK_IMPORTED_MODULE_3__.BingProvider),
/* harmony export */   "defaultBingProviderOptions": () => (/* reexport safe */ _bing__WEBPACK_IMPORTED_MODULE_3__.defaultBingProviderOptions),
/* harmony export */   "GeoPluginGeocoded": () => (/* reexport safe */ _geoplugin__WEBPACK_IMPORTED_MODULE_4__.GeoPluginGeocoded),
/* harmony export */   "GeoPluginProvider": () => (/* reexport safe */ _geoplugin__WEBPACK_IMPORTED_MODULE_4__.GeoPluginProvider),
/* harmony export */   "GoogleMapsGeocodeQuery": () => (/* reexport safe */ _googlemaps__WEBPACK_IMPORTED_MODULE_5__.GoogleMapsGeocodeQuery),
/* harmony export */   "GoogleMapsGeocoded": () => (/* reexport safe */ _googlemaps__WEBPACK_IMPORTED_MODULE_5__.GoogleMapsGeocoded),
/* harmony export */   "GoogleMapsProvider": () => (/* reexport safe */ _googlemaps__WEBPACK_IMPORTED_MODULE_5__.GoogleMapsProvider),
/* harmony export */   "GoogleMapsReverseQuery": () => (/* reexport safe */ _googlemaps__WEBPACK_IMPORTED_MODULE_5__.GoogleMapsReverseQuery),
/* harmony export */   "LocationIQGeocodeQuery": () => (/* reexport safe */ _locationiq__WEBPACK_IMPORTED_MODULE_6__.LocationIQGeocodeQuery),
/* harmony export */   "LocationIQGeocoded": () => (/* reexport safe */ _locationiq__WEBPACK_IMPORTED_MODULE_6__.LocationIQGeocoded),
/* harmony export */   "LocationIQProvider": () => (/* reexport safe */ _locationiq__WEBPACK_IMPORTED_MODULE_6__.LocationIQProvider),
/* harmony export */   "LocationIQReverseQuery": () => (/* reexport safe */ _locationiq__WEBPACK_IMPORTED_MODULE_6__.LocationIQReverseQuery),
/* harmony export */   "defaultLocationIQProviderOptions": () => (/* reexport safe */ _locationiq__WEBPACK_IMPORTED_MODULE_6__.defaultLocationIQProviderOptions),
/* harmony export */   "MAPBOX_SOURCES": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.MAPBOX_SOURCES),
/* harmony export */   "MapboxGeocodeQuery": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.MapboxGeocodeQuery),
/* harmony export */   "MapboxGeocoded": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.MapboxGeocoded),
/* harmony export */   "MapboxProvider": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.MapboxProvider),
/* harmony export */   "MapboxReverseQuery": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.MapboxReverseQuery),
/* harmony export */   "defaultMapboxProviderOptions": () => (/* reexport safe */ _mapbox__WEBPACK_IMPORTED_MODULE_7__.defaultMapboxProviderOptions),
/* harmony export */   "MapQuestGeocodeQuery": () => (/* reexport safe */ _mapquest__WEBPACK_IMPORTED_MODULE_8__.MapQuestGeocodeQuery),
/* harmony export */   "MapQuestGeocoded": () => (/* reexport safe */ _mapquest__WEBPACK_IMPORTED_MODULE_8__.MapQuestGeocoded),
/* harmony export */   "MapQuestLocation": () => (/* reexport safe */ _mapquest__WEBPACK_IMPORTED_MODULE_8__.MapQuestLocation),
/* harmony export */   "MapQuestProvider": () => (/* reexport safe */ _mapquest__WEBPACK_IMPORTED_MODULE_8__.MapQuestProvider),
/* harmony export */   "defaultMapQuestProviderOptions": () => (/* reexport safe */ _mapquest__WEBPACK_IMPORTED_MODULE_8__.defaultMapQuestProviderOptions),
/* harmony export */   "NominatimGeocodeQuery": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.NominatimGeocodeQuery),
/* harmony export */   "NominatimGeocoded": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.NominatimGeocoded),
/* harmony export */   "NominatimProvider": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.NominatimProvider),
/* harmony export */   "NominatimReverseQuery": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.NominatimReverseQuery),
/* harmony export */   "OpenStreetMapGeocodeQuery": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.OpenStreetMapGeocodeQuery),
/* harmony export */   "OpenStreetMapGeocoded": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.OpenStreetMapGeocoded),
/* harmony export */   "OpenStreetMapProvider": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.OpenStreetMapProvider),
/* harmony export */   "OpenStreetMapReverseQuery": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.OpenStreetMapReverseQuery),
/* harmony export */   "defaultNominatimProviderOptions": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.defaultNominatimProviderOptions),
/* harmony export */   "defaultOpenStreetMapProviderOptions": () => (/* reexport safe */ _nominatim__WEBPACK_IMPORTED_MODULE_9__.defaultOpenStreetMapProviderOptions),
/* harmony export */   "OpenCageGeocodeQuery": () => (/* reexport safe */ _opencage__WEBPACK_IMPORTED_MODULE_10__.OpenCageGeocodeQuery),
/* harmony export */   "OpenCageGeocoded": () => (/* reexport safe */ _opencage__WEBPACK_IMPORTED_MODULE_10__.OpenCageGeocoded),
/* harmony export */   "OpenCageProvider": () => (/* reexport safe */ _opencage__WEBPACK_IMPORTED_MODULE_10__.OpenCageProvider),
/* harmony export */   "OpenCageReverseQuery": () => (/* reexport safe */ _opencage__WEBPACK_IMPORTED_MODULE_10__.OpenCageReverseQuery),
/* harmony export */   "defaultOpenCageProviderOptions": () => (/* reexport safe */ _opencage__WEBPACK_IMPORTED_MODULE_10__.defaultOpenCageProviderOptions),
/* harmony export */   "YandexGeocodeQuery": () => (/* reexport safe */ _yandex__WEBPACK_IMPORTED_MODULE_11__.YandexGeocodeQuery),
/* harmony export */   "YandexGeocoded": () => (/* reexport safe */ _yandex__WEBPACK_IMPORTED_MODULE_11__.YandexGeocoded),
/* harmony export */   "YandexProvider": () => (/* reexport safe */ _yandex__WEBPACK_IMPORTED_MODULE_11__.YandexProvider),
/* harmony export */   "YandexReverseQuery": () => (/* reexport safe */ _yandex__WEBPACK_IMPORTED_MODULE_11__.YandexReverseQuery),
/* harmony export */   "defaultYandexProviderOptions": () => (/* reexport safe */ _yandex__WEBPACK_IMPORTED_MODULE_11__.defaultYandexProviderOptions)
/* harmony export */ });
/* harmony import */ var _ProviderHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderHelpers */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var _ProviderInterface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProviderInterface */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var _ChainProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChainProvider */ "./src/provider/ChainProvider.ts");
/* harmony import */ var _bing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bing */ "./src/provider/bing/index.ts");
/* harmony import */ var _geoplugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./geoplugin */ "./src/provider/geoplugin/index.ts");
/* harmony import */ var _googlemaps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./googlemaps */ "./src/provider/googlemaps/index.ts");
/* harmony import */ var _locationiq__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locationiq */ "./src/provider/locationiq/index.ts");
/* harmony import */ var _mapbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mapbox */ "./src/provider/mapbox/index.ts");
/* harmony import */ var _mapquest__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mapquest */ "./src/provider/mapquest/index.ts");
/* harmony import */ var _nominatim__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nominatim */ "./src/provider/nominatim/index.ts");
/* harmony import */ var _opencage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./opencage */ "./src/provider/opencage/index.ts");
/* harmony import */ var _yandex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./yandex */ "./src/provider/yandex/index.ts");















/***/ }),

/***/ "./src/provider/locationiq/LocationIQGeocodeQuery.ts":
/*!***********************************************************!*\
  !*** ./src/provider/locationiq/LocationIQGeocodeQuery.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var LocationIQGeocodeQuery = /** @class */ (function (_super) {
    __extends(LocationIQGeocodeQuery, _super);
    function LocationIQGeocodeQuery(_a) {
        var countryCodes = _a.countryCodes, excludePlaceIds = _a.excludePlaceIds, bounded = _a.bounded, bounds = _a.bounds, dedupe = _a.dedupe, geocodeQueryObject = __rest(_a, ["countryCodes", "excludePlaceIds", "bounded", "bounds", "dedupe"]);
        var _this = _super.call(this, __assign({ bounds: bounds }, geocodeQueryObject)) || this;
        _this.countryCodes = countryCodes;
        _this.excludePlaceIds = excludePlaceIds;
        if (bounded && !bounds) {
            throw new Error('The "bounded" parameter can only be used with the "bounds" parameter.');
        }
        _this.bounded = bounded;
        _this.dedupe = dedupe;
        return _this;
    }
    LocationIQGeocodeQuery.create = function (object) {
        return new this(object);
    };
    LocationIQGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, excludePlaceIds: this.excludePlaceIds, bounded: this.bounded, dedupe: this.dedupe });
    };
    LocationIQGeocodeQuery.prototype.withCountryCodes = function (countryCodes) {
        return new LocationIQGeocodeQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    LocationIQGeocodeQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    LocationIQGeocodeQuery.prototype.withExcludePlaceIds = function (excludePlaceIds) {
        return new LocationIQGeocodeQuery(__assign(__assign({}, this.toObject()), { excludePlaceIds: excludePlaceIds }));
    };
    LocationIQGeocodeQuery.prototype.getExcludePlaceIds = function () {
        return this.excludePlaceIds;
    };
    LocationIQGeocodeQuery.prototype.withBounded = function (bounded) {
        return new LocationIQGeocodeQuery(__assign(__assign({}, this.toObject()), { bounded: bounded }));
    };
    LocationIQGeocodeQuery.prototype.getBounded = function () {
        return this.bounded;
    };
    LocationIQGeocodeQuery.prototype.withDedupe = function (dedupe) {
        return new LocationIQGeocodeQuery(__assign(__assign({}, this.toObject()), { dedupe: dedupe }));
    };
    LocationIQGeocodeQuery.prototype.getDedupe = function () {
        return this.dedupe;
    };
    return LocationIQGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocationIQGeocodeQuery);


/***/ }),

/***/ "./src/provider/locationiq/LocationIQGeocoded.ts":
/*!*******************************************************!*\
  !*** ./src/provider/locationiq/LocationIQGeocoded.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var LocationIQGeocoded = /** @class */ (function (_super) {
    __extends(LocationIQGeocoded, _super);
    function LocationIQGeocoded(_a) {
        var placeId = _a.placeId, displayName = _a.displayName, osmId = _a.osmId, osmType = _a.osmType, categories = _a.categories, types = _a.types, distance = _a.distance, precision = _a.precision, precisionCode = _a.precisionCode, precisionType = _a.precisionType, attribution = _a.attribution, subLocalityLevels = _a.subLocalityLevels, geocodedObject = __rest(_a, ["placeId", "displayName", "osmId", "osmType", "categories", "types", "distance", "precision", "precisionCode", "precisionType", "attribution", "subLocalityLevels"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.placeId = placeId;
        _this.displayName = displayName;
        _this.osmId = osmId;
        _this.osmType = osmType;
        _this.categories = categories;
        _this.types = types;
        _this.distance = distance;
        _this.precision = precision;
        _this.precisionCode = precisionCode;
        _this.precisionType = precisionType;
        _this.attribution = attribution;
        _this.subLocalityLevels = subLocalityLevels || [];
        return _this;
    }
    LocationIQGeocoded.create = function (object) {
        return new this(object);
    };
    LocationIQGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { placeId: this.placeId, displayName: this.displayName, osmId: this.osmId, osmType: this.osmType, categories: this.categories, types: this.types, distance: this.distance, precision: this.precision, precisionCode: this.precisionCode, precisionType: this.precisionType, attribution: this.attribution, subLocalityLevels: this.subLocalityLevels });
    };
    LocationIQGeocoded.prototype.withPlaceId = function (placeId) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { placeId: placeId }));
    };
    LocationIQGeocoded.prototype.getPlaceId = function () {
        return this.placeId;
    };
    LocationIQGeocoded.prototype.withDisplayName = function (displayName) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { displayName: displayName }));
    };
    LocationIQGeocoded.prototype.getDisplayName = function () {
        return this.displayName;
    };
    LocationIQGeocoded.prototype.withOsmId = function (osmId) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { osmId: osmId }));
    };
    LocationIQGeocoded.prototype.getOsmId = function () {
        return this.osmId;
    };
    LocationIQGeocoded.prototype.withOsmType = function (osmType) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { osmType: osmType }));
    };
    LocationIQGeocoded.prototype.getOsmType = function () {
        return this.osmType;
    };
    LocationIQGeocoded.prototype.withCategories = function (categories) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { categories: categories }));
    };
    LocationIQGeocoded.prototype.getCategories = function () {
        return this.categories;
    };
    LocationIQGeocoded.prototype.withTypes = function (types) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { types: types }));
    };
    LocationIQGeocoded.prototype.getTypes = function () {
        return this.types;
    };
    LocationIQGeocoded.prototype.withDistance = function (distance) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { distance: distance }));
    };
    LocationIQGeocoded.prototype.getDistance = function () {
        return this.distance;
    };
    LocationIQGeocoded.prototype.withPrecision = function (precision) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    LocationIQGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    LocationIQGeocoded.prototype.withPrecisionCode = function (precisionCode) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { precisionCode: precisionCode }));
    };
    LocationIQGeocoded.prototype.getPrecisionCode = function () {
        return this.precisionCode;
    };
    LocationIQGeocoded.prototype.withPrecisionType = function (precisionType) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { precisionType: precisionType }));
    };
    LocationIQGeocoded.prototype.getPrecisionType = function () {
        return this.precisionType;
    };
    LocationIQGeocoded.prototype.withAttribution = function (attribution) {
        return new LocationIQGeocoded(__assign(__assign({}, this.toObject()), { attribution: attribution }));
    };
    LocationIQGeocoded.prototype.getAttribution = function () {
        return this.attribution;
    };
    LocationIQGeocoded.prototype.addSubLocalityLevel = function (subLocalityLevel) {
        this.subLocalityLevels.push(subLocalityLevel);
    };
    LocationIQGeocoded.prototype.getSubLocalityLevels = function () {
        return this.subLocalityLevels;
    };
    return LocationIQGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocationIQGeocoded);


/***/ }),

/***/ "./src/provider/locationiq/LocationIQProvider.ts":
/*!*******************************************************!*\
  !*** ./src/provider/locationiq/LocationIQProvider.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultLocationIQProviderOptions": () => (/* binding */ defaultLocationIQProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/locationiq/LocationIQGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/locationiq/LocationIQReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.. */ "./src/provider/locationiq/LocationIQGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultLocationIQProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "", source: "locationiq" });
var LocationIQProvider = /** @class */ (function () {
    function LocationIQProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultLocationIQProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultLocationIQProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the LocationIQ provider. Please add it in the "apiKey" option.');
        }
        if (!["locationiq", "nominatim"].includes(this.options.source || "")) {
            throw new Error('The "source" option must either be "locationiq" or "nominatim".');
        }
    }
    LocationIQProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The LocationIQ provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "locationiq.com",
            pathname: "v1/search.php",
        });
        var params = this.withCommonParams({
            q: geocodeQuery.getText(),
            limit: geocodeQuery.getLimit().toString(),
            countrycodes: geocodeQuery.getCountryCodes()
                ? (_a = geocodeQuery.getCountryCodes()) === null || _a === void 0 ? void 0 : _a.join(",")
                : (_b = this.options.countryCodes) === null || _b === void 0 ? void 0 : _b.join(","),
            exclude_place_ids: (geocodeQuery).getExcludePlaceIds()
                ? (_c = geocodeQuery
                    .getExcludePlaceIds()) === null || _c === void 0 ? void 0 : _c.join(",")
                : undefined,
            viewbox: geocodeQuery.getBounds()
                ? ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.longitudeSW) + "," + ((_e = geocodeQuery.getBounds()) === null || _e === void 0 ? void 0 : _e.latitudeSW) + "," + ((_f = geocodeQuery.getBounds()) === null || _f === void 0 ? void 0 : _f.longitudeNE) + "," + ((_g = geocodeQuery.getBounds()) === null || _g === void 0 ? void 0 : _g.latitudeNE)
                : undefined,
            bounded: geocodeQuery.getBounded()
                ? (_h = geocodeQuery.getBounded()) === null || _h === void 0 ? void 0 : _h.toString()
                : undefined,
            dedupe: geocodeQuery.getDedupe()
                ? (_j = geocodeQuery.getDedupe()) === null || _j === void 0 ? void 0 : _j.toString()
                : undefined,
            matchquality: "1",
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    LocationIQProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var _a;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_3__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "locationiq.com",
            pathname: "v1/reverse.php",
        });
        var params = this.withCommonParams({
            lat: reverseQuery.getCoordinates().latitude.toString(),
            lon: reverseQuery.getCoordinates().longitude.toString(),
            zoom: ((_a = reverseQuery.getZoom()) === null || _a === void 0 ? void 0 : _a.toString()) || "18",
            showdistance: "1",
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    LocationIQProvider.prototype.withCommonParams = function (params, query) {
        return __assign(__assign({}, params), { key: this.options.apiKey || "", format: "json", addressdetails: "1", "accept-language": query.getLocale(), jsonpCallback: this.options.useJsonp ? "json_callback" : undefined, normalizeaddress: "1", normalizecity: "1", statecode: "1", postaladdress: "1", source: this.options.source === "nominatim" ? "nom" : undefined });
    };
    LocationIQProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            var results = data;
            if (!Array.isArray(data)) {
                if (data.error) {
                    var errorMessage_1 = "An error has occurred: " + data.error;
                    if (errorCallback) {
                        errorCallback(new _error__WEBPACK_IMPORTED_MODULE_4__.default(errorMessage_1, data));
                        return;
                    }
                    setTimeout(function () {
                        throw new Error(errorMessage_1);
                    });
                    return;
                }
                results = [data];
            }
            callback(results.map(function (result) {
                return LocationIQProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    LocationIQProvider.mapToGeocoded = function (result) {
        var _a, _b, _c;
        var latitude = parseFloat(result.lat);
        var longitude = parseFloat(result.lon);
        var formattedAddress = result.postal_address;
        var displayName = result.display_name;
        var streetNumber = result.address.house_number;
        var streetName = result.address.road;
        var subLocality = result.address.suburb;
        var locality = result.address.city;
        var postalCode = result.address.postcode
            ? result.address.postcode.split(";")[0]
            : undefined;
        var region = result.address.state;
        var country = result.address.country;
        var countryCode = result.address.country_code;
        var placeId = result.place_id;
        var osmId = result.osm_id;
        var osmType = result.osm_type;
        var categories = result.class ? [result.class] : [];
        var distance = result.distance;
        var types = result.type ? [result.type] : [];
        var precision = (_a = result.matchquality) === null || _a === void 0 ? void 0 : _a.matchlevel;
        var precisionCode = (_b = result.matchquality) === null || _b === void 0 ? void 0 : _b.matchcode;
        var precisionType = (_c = result.matchquality) === null || _c === void 0 ? void 0 : _c.matchtype;
        var attribution = result.licence;
        var geocoded = ___WEBPACK_IMPORTED_MODULE_5__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            formattedAddress: formattedAddress,
            displayName: displayName,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            placeId: placeId,
            osmId: osmId,
            osmType: osmType,
            categories: categories,
            types: types,
            distance: distance,
            precision: precision,
            precisionCode: precisionCode,
            precisionType: precisionType,
            attribution: attribution,
        });
        geocoded = geocoded.withBounds({
            latitudeSW: parseFloat(result.boundingbox[0]),
            longitudeSW: parseFloat(result.boundingbox[2]),
            latitudeNE: parseFloat(result.boundingbox[1]),
            longitudeNE: parseFloat(result.boundingbox[3]),
        });
        var adminLevels = ["state", "county"];
        adminLevels.forEach(function (adminLevel, level) {
            if (result.address[adminLevel]) {
                geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                    level: level + 1,
                    name: result.address[adminLevel] || "",
                    code: adminLevel === "state" ? result.address.state_code : undefined,
                }));
            }
        });
        var subLocalityLevels = ["suburb", "neighbourhood", "road", "name"];
        subLocalityLevels.forEach(function (subLocalityLevel, level) {
            if (result.address[subLocalityLevel]) {
                geocoded.addSubLocalityLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                    level: level + 1,
                    name: result.address[subLocalityLevel] || "",
                }));
            }
        });
        return geocoded;
    };
    return LocationIQProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocationIQProvider);


/***/ }),

/***/ "./src/provider/locationiq/LocationIQReverseQuery.ts":
/*!***********************************************************!*\
  !*** ./src/provider/locationiq/LocationIQReverseQuery.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var LocationIQReverseQuery = /** @class */ (function (_super) {
    __extends(LocationIQReverseQuery, _super);
    function LocationIQReverseQuery(_a) {
        var zoom = _a.zoom, reverseQueryObject = __rest(_a, ["zoom"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        _this.zoom = zoom;
        return _this;
    }
    LocationIQReverseQuery.create = function (object) {
        return new this(object);
    };
    LocationIQReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { zoom: this.zoom });
    };
    LocationIQReverseQuery.prototype.withZoom = function (zoom) {
        return new LocationIQReverseQuery(__assign(__assign({}, this.toObject()), { zoom: zoom }));
    };
    LocationIQReverseQuery.prototype.getZoom = function () {
        return this.zoom;
    };
    return LocationIQReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocationIQReverseQuery);


/***/ }),

/***/ "./src/provider/locationiq/index.ts":
/*!******************************************!*\
  !*** ./src/provider/locationiq/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocationIQGeocoded": () => (/* reexport safe */ _LocationIQGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "LocationIQGeocodeQuery": () => (/* reexport safe */ _LocationIQGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "LocationIQProvider": () => (/* reexport safe */ _LocationIQProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "defaultLocationIQProviderOptions": () => (/* reexport safe */ _LocationIQProvider__WEBPACK_IMPORTED_MODULE_2__.defaultLocationIQProviderOptions),
/* harmony export */   "LocationIQReverseQuery": () => (/* reexport safe */ _LocationIQReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _LocationIQGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LocationIQGeocoded */ "./src/provider/locationiq/LocationIQGeocoded.ts");
/* harmony import */ var _LocationIQGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LocationIQGeocodeQuery */ "./src/provider/locationiq/LocationIQGeocodeQuery.ts");
/* harmony import */ var _LocationIQProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LocationIQProvider */ "./src/provider/locationiq/LocationIQProvider.ts");
/* harmony import */ var _LocationIQReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LocationIQReverseQuery */ "./src/provider/locationiq/LocationIQReverseQuery.ts");









/***/ }),

/***/ "./src/provider/mapbox/MapboxGeocodeQuery.ts":
/*!***************************************************!*\
  !*** ./src/provider/mapbox/MapboxGeocodeQuery.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var MapboxGeocodeQuery = /** @class */ (function (_super) {
    __extends(MapboxGeocodeQuery, _super);
    function MapboxGeocodeQuery(_a) {
        var countryCodes = _a.countryCodes, proximity = _a.proximity, types = _a.types, fuzzyMatch = _a.fuzzyMatch, geocodeQueryObject = __rest(_a, ["countryCodes", "proximity", "types", "fuzzyMatch"]);
        var _this = _super.call(this, geocodeQueryObject) || this;
        _this.countryCodes = countryCodes;
        if (proximity && (!proximity.latitude || !proximity.longitude)) {
            throw new Error('The "proximity" parameter must be an object with the keys: "latitude", "longitude".');
        }
        _this.proximity = proximity;
        _this.types = types;
        _this.fuzzyMatch = fuzzyMatch;
        return _this;
    }
    MapboxGeocodeQuery.create = function (object) {
        return new this(object);
    };
    MapboxGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, proximity: this.proximity, types: this.types, fuzzyMatch: this.fuzzyMatch });
    };
    MapboxGeocodeQuery.prototype.withCountryCodes = function (countryCodes) {
        return new MapboxGeocodeQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    MapboxGeocodeQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    MapboxGeocodeQuery.prototype.withProximity = function (proximity) {
        return new MapboxGeocodeQuery(__assign(__assign({}, this.toObject()), { proximity: proximity }));
    };
    MapboxGeocodeQuery.prototype.getProximity = function () {
        return this.proximity;
    };
    MapboxGeocodeQuery.prototype.withTypes = function (types) {
        return new MapboxGeocodeQuery(__assign(__assign({}, this.toObject()), { types: types }));
    };
    MapboxGeocodeQuery.prototype.getTypes = function () {
        return this.types;
    };
    MapboxGeocodeQuery.prototype.withFuzzyMatch = function (fuzzyMatch) {
        return new MapboxGeocodeQuery(__assign(__assign({}, this.toObject()), { fuzzyMatch: fuzzyMatch }));
    };
    MapboxGeocodeQuery.prototype.getFuzzyMatch = function () {
        return this.fuzzyMatch;
    };
    return MapboxGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapboxGeocodeQuery);


/***/ }),

/***/ "./src/provider/mapbox/MapboxGeocoded.ts":
/*!***********************************************!*\
  !*** ./src/provider/mapbox/MapboxGeocoded.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var MapboxGeocoded = /** @class */ (function (_super) {
    __extends(MapboxGeocoded, _super);
    function MapboxGeocoded(_a) {
        var types = _a.types, geocodedObject = __rest(_a, ["types"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.types = types;
        return _this;
    }
    MapboxGeocoded.create = function (object) {
        return new this(object);
    };
    MapboxGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { types: this.types });
    };
    MapboxGeocoded.prototype.withTypes = function (types) {
        return new MapboxGeocoded(__assign(__assign({}, this.toObject()), { types: types }));
    };
    MapboxGeocoded.prototype.getTypes = function () {
        return this.types;
    };
    return MapboxGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapboxGeocoded);


/***/ }),

/***/ "./src/provider/mapbox/MapboxProvider.ts":
/*!***********************************************!*\
  !*** ./src/provider/mapbox/MapboxProvider.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAPBOX_SOURCES": () => (/* binding */ MAPBOX_SOURCES),
/* harmony export */   "defaultMapboxProviderOptions": () => (/* binding */ defaultMapboxProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/mapbox/MapboxGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/mapbox/MapboxReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.. */ "./src/provider/mapbox/MapboxGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};


// eslint-disable-next-line no-shadow
var MAPBOX_SOURCES;
(function (MAPBOX_SOURCES) {
    MAPBOX_SOURCES["SOURCE_PLACES"] = "mapbox.places";
    MAPBOX_SOURCES["SOURCE_PLACES_PERMANENT"] = "mapbox.places-permanent";
})(MAPBOX_SOURCES || (MAPBOX_SOURCES = {}));
var defaultMapboxProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "", source: MAPBOX_SOURCES.SOURCE_PLACES });
var MapboxProvider = /** @class */ (function () {
    function MapboxProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultMapboxProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultMapboxProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the Mapbox provider. Please add it in the "apiKey" option.');
        }
        if (![
            MAPBOX_SOURCES.SOURCE_PLACES,
            MAPBOX_SOURCES.SOURCE_PLACES_PERMANENT,
        ].includes(this.options.source || "")) {
            throw new Error("The \"source\" option must either be \"" + MAPBOX_SOURCES.SOURCE_PLACES + "\" or \"" + MAPBOX_SOURCES.SOURCE_PLACES_PERMANENT + "\".");
        }
    }
    MapboxProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The Mapbox provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "api.mapbox.com",
            pathname: "geocoding/v5/" + this.options.source + "/" + geocodeQuery.getText() + ".json",
        });
        var fuzzyMatch = geocodeQuery.getFuzzyMatch()
            ? "true"
            : "false";
        var params = this.withCommonParams({
            bbox: geocodeQuery.getBounds()
                ? ((_a = geocodeQuery.getBounds()) === null || _a === void 0 ? void 0 : _a.longitudeSW) + "," + ((_b = geocodeQuery.getBounds()) === null || _b === void 0 ? void 0 : _b.latitudeSW) + "," + ((_c = geocodeQuery.getBounds()) === null || _c === void 0 ? void 0 : _c.longitudeNE) + "," + ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.latitudeNE)
                : undefined,
            fuzzyMatch: geocodeQuery.getFuzzyMatch() !== undefined
                ? fuzzyMatch
                : undefined,
            proximity: geocodeQuery.getProximity()
                ? ((_e = geocodeQuery.getProximity()) === null || _e === void 0 ? void 0 : _e.longitude) + "," + ((_f = geocodeQuery.getProximity()) === null || _f === void 0 ? void 0 : _f.latitude)
                : undefined,
            types: geocodeQuery.getTypes()
                ? (_g = geocodeQuery.getTypes()) === null || _g === void 0 ? void 0 : _g.join(",")
                : undefined,
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    MapboxProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var _a;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_3__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "api.mapbox.com",
            pathname: "geocoding/v5/" + this.options.source + "/" + reverseQuery.getCoordinates().longitude + "," + reverseQuery.getCoordinates().latitude + ".json",
        });
        var params = this.withCommonParams({
            reverseMode: reverseQuery.getReverseMode()
                ? reverseQuery.getReverseMode()
                : undefined,
            types: reverseQuery.getTypes()
                ? (_a = reverseQuery.getTypes()) === null || _a === void 0 ? void 0 : _a.join(",")
                : "address",
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    MapboxProvider.prototype.withCommonParams = function (params, query) {
        var _a, _b;
        return __assign(__assign({}, params), { access_token: this.options.apiKey || "", country: query.getCountryCodes()
                ? (_a = query.getCountryCodes()) === null || _a === void 0 ? void 0 : _a.join(",")
                : (_b = this.options.countryCodes) === null || _b === void 0 ? void 0 : _b.join(","), language: query.getLocale(), limit: query.getLimit().toString() });
    };
    MapboxProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.features.map(function (result) {
                return MapboxProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    MapboxProvider.mapToGeocoded = function (result) {
        var latitude = result.geometry.coordinates[1];
        var longitude = result.geometry.coordinates[0];
        var formattedAddress = result.place_name;
        var streetNumber = result.address;
        var streetName = result.text;
        var locality;
        var postalCode;
        var region;
        var country;
        var countryCode;
        var adminLevels = [];
        var types = result.place_type;
        var adminLevelCode;
        (result.context || []).forEach(function (feature) {
            var type = feature.id.split(".")[0];
            switch (type) {
                case "locality":
                    locality = feature.text;
                    break;
                case "place":
                    locality = feature.text;
                    adminLevels.push(_AdminLevel__WEBPACK_IMPORTED_MODULE_4__.default.create({
                        level: _AdminLevel__WEBPACK_IMPORTED_MODULE_4__.ADMIN_LEVEL_CODES.COUNTY_CODE,
                        name: locality,
                    }));
                    break;
                case "postcode":
                    postalCode = feature.text;
                    break;
                case "region":
                    region = feature.text;
                    adminLevelCode = undefined;
                    if (feature.short_code && feature.short_code.match(/[A-z]{2}-/)) {
                        adminLevelCode = feature.short_code.replace(/[A-z]{2}-/, "");
                    }
                    adminLevels.push(_AdminLevel__WEBPACK_IMPORTED_MODULE_4__.default.create({
                        level: _AdminLevel__WEBPACK_IMPORTED_MODULE_4__.ADMIN_LEVEL_CODES.STATE_CODE,
                        name: region,
                        code: adminLevelCode,
                    }));
                    break;
                case "country":
                    country = feature.text;
                    countryCode = feature.short_code;
                    break;
                default:
            }
        });
        var geocoded = ___WEBPACK_IMPORTED_MODULE_5__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            formattedAddress: formattedAddress,
            streetNumber: streetNumber,
            streetName: streetName,
            locality: locality,
            postalCode: postalCode,
            region: region,
            adminLevels: adminLevels,
            country: country,
            countryCode: countryCode,
            types: types,
        });
        if (result.bbox) {
            geocoded = geocoded.withBounds({
                latitudeSW: result.bbox[1],
                longitudeSW: result.bbox[0],
                latitudeNE: result.bbox[3],
                longitudeNE: result.bbox[2],
            });
        }
        return geocoded;
    };
    return MapboxProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapboxProvider);


/***/ }),

/***/ "./src/provider/mapbox/MapboxReverseQuery.ts":
/*!***************************************************!*\
  !*** ./src/provider/mapbox/MapboxReverseQuery.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var MapboxReverseQuery = /** @class */ (function (_super) {
    __extends(MapboxReverseQuery, _super);
    function MapboxReverseQuery(_a) {
        var countryCodes = _a.countryCodes, reverseMode = _a.reverseMode, types = _a.types, reverseQueryObject = __rest(_a, ["countryCodes", "reverseMode", "types"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        _this.countryCodes = countryCodes;
        _this.reverseMode = reverseMode;
        _this.types = types;
        return _this;
    }
    MapboxReverseQuery.create = function (object) {
        return new this(object);
    };
    MapboxReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, reverseMode: this.reverseMode, types: this.types });
    };
    MapboxReverseQuery.prototype.withCountryCodes = function (countryCodes) {
        return new MapboxReverseQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    MapboxReverseQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    MapboxReverseQuery.prototype.withReverseMode = function (reverseMode) {
        return new MapboxReverseQuery(__assign(__assign({}, this.toObject()), { reverseMode: reverseMode }));
    };
    MapboxReverseQuery.prototype.getReverseMode = function () {
        return this.reverseMode;
    };
    MapboxReverseQuery.prototype.withTypes = function (types) {
        return new MapboxReverseQuery(__assign(__assign({}, this.toObject()), { types: types }));
    };
    MapboxReverseQuery.prototype.getTypes = function () {
        return this.types;
    };
    return MapboxReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapboxReverseQuery);


/***/ }),

/***/ "./src/provider/mapbox/index.ts":
/*!**************************************!*\
  !*** ./src/provider/mapbox/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MapboxGeocoded": () => (/* reexport safe */ _MapboxGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "MapboxGeocodeQuery": () => (/* reexport safe */ _MapboxGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "MapboxProvider": () => (/* reexport safe */ _MapboxProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "MAPBOX_SOURCES": () => (/* reexport safe */ _MapboxProvider__WEBPACK_IMPORTED_MODULE_2__.MAPBOX_SOURCES),
/* harmony export */   "defaultMapboxProviderOptions": () => (/* reexport safe */ _MapboxProvider__WEBPACK_IMPORTED_MODULE_2__.defaultMapboxProviderOptions),
/* harmony export */   "MapboxReverseQuery": () => (/* reexport safe */ _MapboxReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _MapboxGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MapboxGeocoded */ "./src/provider/mapbox/MapboxGeocoded.ts");
/* harmony import */ var _MapboxGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapboxGeocodeQuery */ "./src/provider/mapbox/MapboxGeocodeQuery.ts");
/* harmony import */ var _MapboxProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MapboxProvider */ "./src/provider/mapbox/MapboxProvider.ts");
/* harmony import */ var _MapboxReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MapboxReverseQuery */ "./src/provider/mapbox/MapboxReverseQuery.ts");









/***/ }),

/***/ "./src/provider/mapquest/MapQuestGeocodeQuery.ts":
/*!*******************************************************!*\
  !*** ./src/provider/mapquest/MapQuestGeocodeQuery.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};



var MapQuestGeocodeQuery = /** @class */ (function (_super) {
    __extends(MapQuestGeocodeQuery, _super);
    function MapQuestGeocodeQuery(_a) {
        var location = _a.location, geocodeQueryObject = __rest(_a, ["location"]);
        var _this = _super.call(this, __assign(__assign({}, geocodeQueryObject), { text: location ? "from_location" : geocodeQueryObject.text })) || this;
        if (!location) {
            return _this;
        }
        if ("getLatLng" in location) {
            _this.location = location.toObject();
            return _this;
        }
        if ("getLocality" in location) {
            _this.location = MapQuestGeocodeQuery.convertGeocodedToLocationObject(location);
            return _this;
        }
        var geocodedPropsNumber = 0;
        var mapQuestLocationPropsNumber = 0;
        var geocodedObject = _Geocoded__WEBPACK_IMPORTED_MODULE_0__.default.create({}).toObject();
        Object.keys(geocodedObject).forEach(function (prop) {
            if (prop in location) {
                geocodedPropsNumber += 1;
            }
        });
        [
            "street",
            "adminArea5",
            "city",
            "adminArea4",
            "county",
            "adminArea3",
            "state",
            "adminArea1",
            "country",
            "postalCode",
            "type",
        ].forEach(function (prop) {
            if (prop in location) {
                mapQuestLocationPropsNumber += 1;
            }
        });
        if (geocodedPropsNumber > mapQuestLocationPropsNumber) {
            _this.location = MapQuestGeocodeQuery.convertGeocodedToLocationObject(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default.create(location));
            return _this;
        }
        _this.location = location;
        return _this;
    }
    MapQuestGeocodeQuery.create = function (object) {
        return new this(object);
    };
    MapQuestGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { location: this.location });
    };
    MapQuestGeocodeQuery.prototype.withLocation = function (location) {
        return new MapQuestGeocodeQuery(__assign(__assign({}, this.toObject()), { location: location }));
    };
    MapQuestGeocodeQuery.prototype.getLocation = function () {
        return this.location;
    };
    MapQuestGeocodeQuery.convertGeocodedToLocationObject = function (geocoded) {
        var location = {};
        var streetParts = [
            geocoded.getStreetNumber() || "",
            geocoded.getStreetName() || "",
        ];
        var street = streetParts.join(" ");
        if (street) {
            location.street = street;
        }
        if (geocoded.getLocality()) {
            location.city = geocoded.getLocality();
        }
        if (geocoded.getCountry()) {
            location.country = geocoded.getCountry();
        }
        if (geocoded.getPostalCode()) {
            location.postalCode = geocoded.getPostalCode();
        }
        geocoded.getAdminLevels().forEach(function (adminLevel) {
            if (adminLevel.getLevel() === _AdminLevel__WEBPACK_IMPORTED_MODULE_1__.ADMIN_LEVEL_CODES.STATE_CODE) {
                location.state = adminLevel.getCode() || adminLevel.getName();
            }
            if (adminLevel.getLevel() === _AdminLevel__WEBPACK_IMPORTED_MODULE_1__.ADMIN_LEVEL_CODES.COUNTY_CODE) {
                location.county = adminLevel.getCode() || adminLevel.getName();
            }
        });
        return location;
    };
    return MapQuestGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_2__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapQuestGeocodeQuery);


/***/ }),

/***/ "./src/provider/mapquest/MapQuestGeocoded.ts":
/*!***************************************************!*\
  !*** ./src/provider/mapquest/MapQuestGeocoded.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var MapQuestGeocoded = /** @class */ (function (_super) {
    __extends(MapQuestGeocoded, _super);
    function MapQuestGeocoded(_a) {
        var precision = _a.precision, precisionCode = _a.precisionCode, mapUrl = _a.mapUrl, attribution = _a.attribution, geocodedObject = __rest(_a, ["precision", "precisionCode", "mapUrl", "attribution"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.precision = precision;
        _this.precisionCode = precisionCode;
        _this.mapUrl = mapUrl;
        _this.attribution = attribution;
        return _this;
    }
    MapQuestGeocoded.create = function (object) {
        return new this(object);
    };
    MapQuestGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { precision: this.precision, precisionCode: this.precisionCode, mapUrl: this.mapUrl, attribution: this.attribution });
    };
    MapQuestGeocoded.prototype.withPrecision = function (precision) {
        return new MapQuestGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    MapQuestGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    MapQuestGeocoded.prototype.withPrecisionCode = function (precisionCode) {
        return new MapQuestGeocoded(__assign(__assign({}, this.toObject()), { precisionCode: precisionCode }));
    };
    MapQuestGeocoded.prototype.getPrecisionCode = function () {
        return this.precisionCode;
    };
    MapQuestGeocoded.prototype.withMapUrl = function (mapUrl) {
        return new MapQuestGeocoded(__assign(__assign({}, this.toObject()), { mapUrl: mapUrl }));
    };
    MapQuestGeocoded.prototype.getMapUrl = function () {
        return this.mapUrl;
    };
    MapQuestGeocoded.prototype.withAttribution = function (attribution) {
        return new MapQuestGeocoded(__assign(__assign({}, this.toObject()), { attribution: attribution }));
    };
    MapQuestGeocoded.prototype.getAttribution = function () {
        return this.attribution;
    };
    return MapQuestGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapQuestGeocoded);


/***/ }),

/***/ "./src/provider/mapquest/MapQuestLocation.ts":
/*!***************************************************!*\
  !*** ./src/provider/mapquest/MapQuestLocation.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var MapQuestLocation = /** @class */ (function () {
    function MapQuestLocation(_a) {
        var latLng = _a.latLng, street = _a.street, adminArea1 = _a.adminArea1, country = _a.country, adminArea3 = _a.adminArea3, state = _a.state, adminArea4 = _a.adminArea4, county = _a.county, adminArea5 = _a.adminArea5, city = _a.city, postalCode = _a.postalCode, type = _a.type;
        this.latLng = latLng;
        this.street = street;
        this.adminArea1 = adminArea1;
        this.country = country;
        this.adminArea3 = adminArea3;
        this.state = state;
        this.adminArea4 = adminArea4;
        this.county = county;
        this.adminArea5 = adminArea5;
        this.city = city;
        this.postalCode = postalCode;
        this.type = type;
    }
    MapQuestLocation.create = function (object) {
        return new this(object);
    };
    MapQuestLocation.prototype.toObject = function () {
        return {
            latLng: this.latLng,
            street: this.street,
            adminArea1: this.adminArea1,
            country: this.country,
            adminArea3: this.adminArea3,
            state: this.state,
            adminArea4: this.adminArea4,
            county: this.county,
            adminArea5: this.adminArea5,
            city: this.city,
            postalCode: this.postalCode,
            type: this.type,
        };
    };
    MapQuestLocation.prototype.getLatLng = function () {
        return this.latLng;
    };
    MapQuestLocation.prototype.getStreet = function () {
        return this.street;
    };
    MapQuestLocation.prototype.getAdminArea1 = function () {
        return this.adminArea1;
    };
    MapQuestLocation.prototype.getCountry = function () {
        return this.country;
    };
    MapQuestLocation.prototype.getAdminArea3 = function () {
        return this.adminArea3;
    };
    MapQuestLocation.prototype.getState = function () {
        return this.state;
    };
    MapQuestLocation.prototype.getAdminArea4 = function () {
        return this.adminArea4;
    };
    MapQuestLocation.prototype.getCounty = function () {
        return this.county;
    };
    MapQuestLocation.prototype.getAdminArea5 = function () {
        return this.adminArea5;
    };
    MapQuestLocation.prototype.getCity = function () {
        return this.city;
    };
    MapQuestLocation.prototype.getPostalCode = function () {
        return this.postalCode;
    };
    MapQuestLocation.prototype.getType = function () {
        return this.type;
    };
    return MapQuestLocation;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapQuestLocation);


/***/ }),

/***/ "./src/provider/mapquest/MapQuestProvider.ts":
/*!***************************************************!*\
  !*** ./src/provider/mapquest/MapQuestProvider.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultMapQuestProviderOptions": () => (/* binding */ defaultMapQuestProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/mapquest/MapQuestGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./.. */ "./src/provider/mapquest/MapQuestGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultMapQuestProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "", method: "GET", source: "mapquest" });
var MapQuestProvider = /** @class */ (function () {
    function MapQuestProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultMapQuestProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultMapQuestProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the MapQuest provider. Please add it in the "apiKey" option.');
        }
        if (!["GET", "POST"].includes(this.options.method || "")) {
            throw new Error('The "method" option must either be "GET" or "POST".');
        }
        if (!["mapquest", "nominatim"].includes(this.options.source || "")) {
            throw new Error('The "source" option must either be "mapquest" or "nominatim".');
        }
    }
    MapQuestProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The MapQuest provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            method: this.options.method,
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.source === "nominatim"
                ? "open.mapquestapi.com"
                : "www.mapquestapi.com",
            pathname: "geocoding/v1/address",
        });
        var requestParams = {
            boundingBox: geocodeQuery.getBounds()
                ? ((_a = geocodeQuery.getBounds()) === null || _a === void 0 ? void 0 : _a.latitudeNE) + "," + ((_b = geocodeQuery.getBounds()) === null || _b === void 0 ? void 0 : _b.longitudeSW) + "," + ((_c = geocodeQuery.getBounds()) === null || _c === void 0 ? void 0 : _c.latitudeSW) + "," + ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.longitudeNE)
                : undefined,
            maxResults: geocodeQuery.getLimit().toString(),
        };
        if (geocodeQuery.getLocation()) {
            requestParams = __assign(__assign({}, geocodeQuery.getLocation()), requestParams);
        }
        else {
            requestParams = __assign({ location: geocodeQuery.getText() }, requestParams);
        }
        requestParams = this.options.method === "GET" ? requestParams : {};
        var params = this.withCommonParams(requestParams);
        var body = this.options.method === "POST"
            ? {
                location: geocodeQuery.getLocation()
                    ? (geocodeQuery.getLocation())
                    : geocodeQuery.getText(),
                options: {
                    boundingBox: geocodeQuery.getBounds()
                        ? {
                            ul: {
                                lat: (_e = geocodeQuery.getBounds()) === null || _e === void 0 ? void 0 : _e.latitudeNE,
                                lng: (_f = geocodeQuery.getBounds()) === null || _f === void 0 ? void 0 : _f.longitudeSW,
                            },
                            lr: {
                                lat: (_g = geocodeQuery.getBounds()) === null || _g === void 0 ? void 0 : _g.latitudeSW,
                                lng: (_h = geocodeQuery.getBounds()) === null || _h === void 0 ? void 0 : _h.longitudeNE,
                            },
                        }
                        : undefined,
                    maxResults: geocodeQuery.getLimit().toString(),
                },
            }
            : {};
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, body, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, body, errorCallback);
    };
    MapQuestProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            method: this.options.method,
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.source === "nominatim"
                ? "open.mapquestapi.com"
                : "www.mapquestapi.com",
            pathname: "geocoding/v1/reverse",
        });
        var requestParams = this.options.method === "GET"
            ? {
                location: reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
            }
            : {};
        var params = this.withCommonParams(requestParams);
        var body = this.options.method === "POST"
            ? {
                location: {
                    latLng: {
                        lat: reverseQuery.getCoordinates().latitude,
                        lng: reverseQuery.getCoordinates().longitude,
                    },
                },
            }
            : {};
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, body, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, body, reverseErrorCallback);
    };
    MapQuestProvider.prototype.withCommonParams = function (params) {
        return __assign(__assign({}, params), { key: this.options.apiKey || "", jsonpCallback: this.options.useJsonp ? "callback" : undefined });
    };
    MapQuestProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            if (data.info.statuscode !== 0) {
                var errorMessage_1 = "An error has occurred (" + data.info.statuscode + "): " + data.info.messages.join(" / ");
                if (errorCallback) {
                    errorCallback(new _error__WEBPACK_IMPORTED_MODULE_3__.default(errorMessage_1, data));
                    return;
                }
                setTimeout(function () {
                    throw new Error(errorMessage_1);
                });
                return;
            }
            callback(data.results[0].locations.map(function (result) {
                return MapQuestProvider.mapToGeocoded(result, data.info.copyright.text);
            }));
        }, headers, body, errorCallback);
    };
    MapQuestProvider.mapToGeocoded = function (result, attribution) {
        var latitude = result.latLng.lat;
        var longitude = result.latLng.lng;
        var streetName = result.street;
        var subLocality = result.adminArea6;
        var locality = result.adminArea5;
        var postalCode = result.postalCode;
        var region = result.adminArea4;
        var country = result.adminArea1;
        var countryCode = result.adminArea1;
        var precision = result.geocodeQuality;
        var precisionCode = result.geocodeQualityCode;
        var mapUrl = result.mapUrl;
        var geocoded = ___WEBPACK_IMPORTED_MODULE_4__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            attribution: attribution,
            precision: precision,
            precisionCode: precisionCode,
            mapUrl: mapUrl,
        });
        if (result.adminArea3) {
            geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_5__.default.create({
                level: _AdminLevel__WEBPACK_IMPORTED_MODULE_5__.ADMIN_LEVEL_CODES.STATE_CODE,
                name: result.adminArea3,
                code: result.adminArea3.length === 2 ? result.adminArea3 : undefined,
            }));
        }
        if (result.adminArea4) {
            geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_5__.default.create({
                level: _AdminLevel__WEBPACK_IMPORTED_MODULE_5__.ADMIN_LEVEL_CODES.COUNTY_CODE,
                name: result.adminArea4,
            }));
        }
        return geocoded;
    };
    return MapQuestProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapQuestProvider);


/***/ }),

/***/ "./src/provider/mapquest/index.ts":
/*!****************************************!*\
  !*** ./src/provider/mapquest/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MapQuestGeocoded": () => (/* reexport safe */ _MapQuestGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "MapQuestGeocodeQuery": () => (/* reexport safe */ _MapQuestGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "MapQuestLocation": () => (/* reexport safe */ _MapQuestLocation__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "MapQuestProvider": () => (/* reexport safe */ _MapQuestProvider__WEBPACK_IMPORTED_MODULE_3__.default),
/* harmony export */   "defaultMapQuestProviderOptions": () => (/* reexport safe */ _MapQuestProvider__WEBPACK_IMPORTED_MODULE_3__.defaultMapQuestProviderOptions)
/* harmony export */ });
/* harmony import */ var _MapQuestGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MapQuestGeocoded */ "./src/provider/mapquest/MapQuestGeocoded.ts");
/* harmony import */ var _MapQuestGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapQuestGeocodeQuery */ "./src/provider/mapquest/MapQuestGeocodeQuery.ts");
/* harmony import */ var _MapQuestLocation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MapQuestLocation */ "./src/provider/mapquest/MapQuestLocation.ts");
/* harmony import */ var _MapQuestProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MapQuestProvider */ "./src/provider/mapquest/MapQuestProvider.ts");









/***/ }),

/***/ "./src/provider/nominatim/NominatimGeocodeQuery.ts":
/*!*********************************************************!*\
  !*** ./src/provider/nominatim/NominatimGeocodeQuery.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var NominatimGeocodeQuery = /** @class */ (function (_super) {
    __extends(NominatimGeocodeQuery, _super);
    function NominatimGeocodeQuery(_a) {
        var countryCodes = _a.countryCodes, excludePlaceIds = _a.excludePlaceIds, bounded = _a.bounded, bounds = _a.bounds, dedupe = _a.dedupe, shape = _a.shape, shapeThreshold = _a.shapeThreshold, geocodeQueryObject = __rest(_a, ["countryCodes", "excludePlaceIds", "bounded", "bounds", "dedupe", "shape", "shapeThreshold"]);
        var _this = _super.call(this, __assign({ bounds: bounds }, geocodeQueryObject)) || this;
        _this.countryCodes = countryCodes;
        _this.excludePlaceIds = excludePlaceIds;
        if (bounded && !bounds) {
            throw new Error('The "bounded" parameter can only be used with the "bounds" parameter.');
        }
        _this.bounded = bounded;
        _this.dedupe = dedupe;
        if (shape && !["geojson", "kml", "svg", "text"].includes(shape)) {
            throw new Error('The "shape" parameter can only have the following values: "geojson", "kml", "svg", "text".');
        }
        _this.shape = shape;
        _this.shapeThreshold = shapeThreshold;
        return _this;
    }
    NominatimGeocodeQuery.create = function (object) {
        return new this(object);
    };
    NominatimGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, excludePlaceIds: this.excludePlaceIds, bounded: this.bounded, dedupe: this.dedupe, shape: this.shape, shapeThreshold: this.shapeThreshold });
    };
    NominatimGeocodeQuery.prototype.withCountryCodes = function (countryCodes) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    NominatimGeocodeQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    NominatimGeocodeQuery.prototype.withExcludePlaceIds = function (excludePlaceIds) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { excludePlaceIds: excludePlaceIds }));
    };
    NominatimGeocodeQuery.prototype.getExcludePlaceIds = function () {
        return this.excludePlaceIds;
    };
    NominatimGeocodeQuery.prototype.withBounded = function (bounded) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { bounded: bounded }));
    };
    NominatimGeocodeQuery.prototype.getBounded = function () {
        return this.bounded;
    };
    NominatimGeocodeQuery.prototype.withDedupe = function (dedupe) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { dedupe: dedupe }));
    };
    NominatimGeocodeQuery.prototype.getDedupe = function () {
        return this.dedupe;
    };
    NominatimGeocodeQuery.prototype.withShape = function (shape) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { shape: shape }));
    };
    NominatimGeocodeQuery.prototype.getShape = function () {
        return this.shape;
    };
    NominatimGeocodeQuery.prototype.withShapeThreshold = function (shapeThreshold) {
        return new NominatimGeocodeQuery(__assign(__assign({}, this.toObject()), { shapeThreshold: shapeThreshold }));
    };
    NominatimGeocodeQuery.prototype.getShapeThreshold = function () {
        return this.shapeThreshold;
    };
    return NominatimGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NominatimGeocodeQuery);


/***/ }),

/***/ "./src/provider/nominatim/NominatimGeocoded.ts":
/*!*****************************************************!*\
  !*** ./src/provider/nominatim/NominatimGeocoded.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var NominatimGeocoded = /** @class */ (function (_super) {
    __extends(NominatimGeocoded, _super);
    function NominatimGeocoded(_a) {
        var displayName = _a.displayName, osmId = _a.osmId, osmType = _a.osmType, categories = _a.categories, types = _a.types, attribution = _a.attribution, subLocalityLevels = _a.subLocalityLevels, shape = _a.shape, geocodedObject = __rest(_a, ["displayName", "osmId", "osmType", "categories", "types", "attribution", "subLocalityLevels", "shape"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.displayName = displayName;
        _this.osmId = osmId;
        _this.osmType = osmType;
        _this.categories = categories;
        _this.types = types;
        _this.attribution = attribution;
        _this.subLocalityLevels = subLocalityLevels || [];
        _this.shape = shape;
        return _this;
    }
    NominatimGeocoded.create = function (object) {
        return new this(object);
    };
    NominatimGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { displayName: this.displayName, osmId: this.osmId, osmType: this.osmType, categories: this.categories, types: this.types, attribution: this.attribution, subLocalityLevels: this.subLocalityLevels, shape: this.shape });
    };
    NominatimGeocoded.prototype.withDisplayName = function (displayName) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { displayName: displayName }));
    };
    NominatimGeocoded.prototype.getDisplayName = function () {
        return this.displayName;
    };
    NominatimGeocoded.prototype.withOsmId = function (osmId) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { osmId: osmId }));
    };
    NominatimGeocoded.prototype.getOsmId = function () {
        return this.osmId;
    };
    NominatimGeocoded.prototype.withOsmType = function (osmType) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { osmType: osmType }));
    };
    NominatimGeocoded.prototype.getOsmType = function () {
        return this.osmType;
    };
    NominatimGeocoded.prototype.withCategories = function (categories) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { categories: categories }));
    };
    NominatimGeocoded.prototype.getCategories = function () {
        return this.categories;
    };
    NominatimGeocoded.prototype.withTypes = function (types) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { types: types }));
    };
    NominatimGeocoded.prototype.getTypes = function () {
        return this.types;
    };
    NominatimGeocoded.prototype.withAttribution = function (attribution) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { attribution: attribution }));
    };
    NominatimGeocoded.prototype.getAttribution = function () {
        return this.attribution;
    };
    NominatimGeocoded.prototype.addSubLocalityLevel = function (subLocalityLevel) {
        this.subLocalityLevels.push(subLocalityLevel);
    };
    NominatimGeocoded.prototype.getSubLocalityLevels = function () {
        return this.subLocalityLevels;
    };
    NominatimGeocoded.prototype.withShape = function (shape) {
        return new NominatimGeocoded(__assign(__assign({}, this.toObject()), { shape: shape }));
    };
    NominatimGeocoded.prototype.getShape = function () {
        return this.shape;
    };
    return NominatimGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NominatimGeocoded);


/***/ }),

/***/ "./src/provider/nominatim/NominatimProvider.ts":
/*!*****************************************************!*\
  !*** ./src/provider/nominatim/NominatimProvider.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultNominatimProviderOptions": () => (/* binding */ defaultNominatimProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/nominatim/NominatimGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/nominatim/NominatimReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.. */ "./src/provider/nominatim/NominatimGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultNominatimProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { host: "nominatim.openstreetmap.org", userAgent: "" });
var NominatimProvider = /** @class */ (function () {
    function NominatimProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultNominatimProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultNominatimProviderOptions), options);
        if (this.options.host === defaultNominatimProviderOptions.host &&
            !this.options.userAgent) {
            throw new Error('An User-Agent identifying your application is required for the OpenStreetMap / Nominatim provider when using the default host. Please add it in the "userAgent" option.');
        }
    }
    NominatimProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The OpenStreetMap / Nominatim provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.host,
            pathname: "search",
        });
        var params = this.withCommonParams({
            q: geocodeQuery.getText(),
            limit: geocodeQuery.getLimit().toString(),
            countrycodes: geocodeQuery.getCountryCodes()
                ? (_a = geocodeQuery.getCountryCodes()) === null || _a === void 0 ? void 0 : _a.join(",")
                : (_b = this.options.countryCodes) === null || _b === void 0 ? void 0 : _b.join(","),
            exclude_place_ids: (geocodeQuery).getExcludePlaceIds()
                ? (_c = geocodeQuery
                    .getExcludePlaceIds()) === null || _c === void 0 ? void 0 : _c.join(",")
                : undefined,
            viewbox: geocodeQuery.getBounds()
                ? ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.longitudeSW) + "," + ((_e = geocodeQuery.getBounds()) === null || _e === void 0 ? void 0 : _e.latitudeSW) + "," + ((_f = geocodeQuery.getBounds()) === null || _f === void 0 ? void 0 : _f.longitudeNE) + "," + ((_g = geocodeQuery.getBounds()) === null || _g === void 0 ? void 0 : _g.latitudeNE)
                : undefined,
            bounded: geocodeQuery.getBounded()
                ? (_h = geocodeQuery.getBounded()) === null || _h === void 0 ? void 0 : _h.toString()
                : undefined,
            dedupe: geocodeQuery.getDedupe()
                ? (_j = geocodeQuery.getDedupe()) === null || _j === void 0 ? void 0 : _j.toString()
                : undefined,
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, _this.getHeaders(), {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, this.getHeaders(), {}, errorCallback);
    };
    NominatimProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var _a;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_3__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.host,
            pathname: "reverse",
        });
        var params = this.withCommonParams({
            lat: reverseQuery.getCoordinates().latitude.toString(),
            lon: reverseQuery.getCoordinates().longitude.toString(),
            zoom: ((_a = reverseQuery.getZoom()) === null || _a === void 0 ? void 0 : _a.toString()) || "18",
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, _this.getHeaders(), {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, this.getHeaders(), {}, reverseErrorCallback);
    };
    NominatimProvider.prototype.withCommonParams = function (params, query) {
        var _a;
        return __assign(__assign({}, params), { format: "jsonv2", addressdetails: "1", polygon_geojson: query.getShape() && query.getShape() === "geojson" ? "1" : undefined, polygon_kml: query.getShape() && query.getShape() === "kml" ? "1" : undefined, polygon_svg: query.getShape() && query.getShape() === "svg" ? "1" : undefined, polygon_text: query.getShape() && query.getShape() === "text" ? "1" : undefined, polygon_threshold: query.getShapeThreshold()
                ? (_a = query.getShapeThreshold()) === null || _a === void 0 ? void 0 : _a.toString()
                : undefined, jsonpCallback: this.options.useJsonp ? "json_callback" : undefined, "accept-language": query.getLocale() });
    };
    NominatimProvider.prototype.getHeaders = function () {
        return {
            "User-Agent": this.options.userAgent || "",
            Referer: this.options.referer,
        };
    };
    NominatimProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            var results = data;
            if (!Array.isArray(data)) {
                if (data.error) {
                    var errorMessage_1 = "An error has occurred: " + data.error;
                    if (errorCallback) {
                        errorCallback(new _error__WEBPACK_IMPORTED_MODULE_4__.default(errorMessage_1, data));
                        return;
                    }
                    setTimeout(function () {
                        throw new Error(errorMessage_1);
                    });
                    return;
                }
                results = [data];
            }
            callback(results.map(function (result) {
                return NominatimProvider.mapToGeocoded(result);
            }));
        }, headers, body, errorCallback);
    };
    NominatimProvider.mapToGeocoded = function (result) {
        var latitude = parseFloat(result.lat);
        var longitude = parseFloat(result.lon);
        var displayName = result.display_name;
        var streetNumber = result.address.house_number;
        var streetName = result.address.road || result.address.pedestrian;
        var subLocality = result.address.suburb;
        var locality;
        var postalCode = result.address.postcode
            ? result.address.postcode.split(";")[0]
            : undefined;
        var region = result.address.state;
        var country = result.address.country;
        var countryCode = result.address.country_code;
        var osmId = result.osm_id;
        var osmType = result.osm_type;
        var categories = [result.category];
        var types = [result.type];
        var attribution = result.licence;
        var shape = result.geojson || result.geokml || result.svg || result.geotext;
        var localityTypes = [
            "city",
            "town",
            "village",
            "hamlet",
        ];
        localityTypes.forEach(function (localityType) {
            if (result.address[localityType] && !locality) {
                locality = result.address[localityType];
            }
        });
        var geocoded = ___WEBPACK_IMPORTED_MODULE_5__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            displayName: displayName,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            osmId: osmId,
            osmType: osmType,
            categories: categories,
            types: types,
            attribution: attribution,
            shape: shape,
        });
        geocoded = geocoded.withBounds({
            latitudeSW: parseFloat(result.boundingbox[0]),
            longitudeSW: parseFloat(result.boundingbox[2]),
            latitudeNE: parseFloat(result.boundingbox[1]),
            longitudeNE: parseFloat(result.boundingbox[3]),
        });
        var adminLevels = ["state", "county"];
        adminLevels.forEach(function (adminLevel, level) {
            if (result.address[adminLevel]) {
                geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                    level: level + 1,
                    name: result.address[adminLevel] || "",
                }));
            }
        });
        var subLocalityLevels = [
            ["city_district", "district", "borough", "suburb", "subdivision"],
            ["hamlet", "croft", "isolated_dwelling"],
            ["neighbourhood", "allotments", "quarter"],
            [
                "city_block",
                "residental",
                "farm",
                "farmyard",
                "industrial",
                "commercial",
                "retail",
            ],
            ["road"],
            ["house_name"],
        ];
        subLocalityLevels.forEach(function (subLocalities, level) {
            subLocalities.forEach(function (subLocalityLevel) {
                if (result.address[subLocalityLevel]) {
                    geocoded.addSubLocalityLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                        level: level + 1,
                        name: result.address[subLocalityLevel] || "",
                    }));
                }
            });
        });
        return geocoded;
    };
    return NominatimProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NominatimProvider);


/***/ }),

/***/ "./src/provider/nominatim/NominatimReverseQuery.ts":
/*!*********************************************************!*\
  !*** ./src/provider/nominatim/NominatimReverseQuery.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var NominatimReverseQuery = /** @class */ (function (_super) {
    __extends(NominatimReverseQuery, _super);
    function NominatimReverseQuery(_a) {
        var zoom = _a.zoom, shape = _a.shape, shapeThreshold = _a.shapeThreshold, reverseQueryObject = __rest(_a, ["zoom", "shape", "shapeThreshold"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        _this.zoom = zoom;
        if (shape && !["geojson", "kml", "svg", "text"].includes(shape)) {
            throw new Error('The "shape" parameter can only have the following values: "geojson", "kml", "svg", "text".');
        }
        _this.shape = shape;
        _this.shapeThreshold = shapeThreshold;
        return _this;
    }
    NominatimReverseQuery.create = function (object) {
        return new this(object);
    };
    NominatimReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { zoom: this.zoom, shape: this.shape, shapeThreshold: this.shapeThreshold });
    };
    NominatimReverseQuery.prototype.withZoom = function (zoom) {
        return new NominatimReverseQuery(__assign(__assign({}, this.toObject()), { zoom: zoom }));
    };
    NominatimReverseQuery.prototype.getZoom = function () {
        return this.zoom;
    };
    NominatimReverseQuery.prototype.withShape = function (shape) {
        return new NominatimReverseQuery(__assign(__assign({}, this.toObject()), { shape: shape }));
    };
    NominatimReverseQuery.prototype.getShape = function () {
        return this.shape;
    };
    NominatimReverseQuery.prototype.withShapeThreshold = function (shapeThreshold) {
        return new NominatimReverseQuery(__assign(__assign({}, this.toObject()), { shapeThreshold: shapeThreshold }));
    };
    NominatimReverseQuery.prototype.getShapeThreshold = function () {
        return this.shapeThreshold;
    };
    return NominatimReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NominatimReverseQuery);


/***/ }),

/***/ "./src/provider/nominatim/index.ts":
/*!*****************************************!*\
  !*** ./src/provider/nominatim/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NominatimGeocoded": () => (/* reexport safe */ _NominatimGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "OpenStreetMapGeocoded": () => (/* reexport safe */ _NominatimGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "NominatimGeocodeQuery": () => (/* reexport safe */ _NominatimGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "OpenStreetMapGeocodeQuery": () => (/* reexport safe */ _NominatimGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "NominatimProvider": () => (/* reexport safe */ _NominatimProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "OpenStreetMapProvider": () => (/* reexport safe */ _NominatimProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "defaultNominatimProviderOptions": () => (/* reexport safe */ _NominatimProvider__WEBPACK_IMPORTED_MODULE_2__.defaultNominatimProviderOptions),
/* harmony export */   "defaultOpenStreetMapProviderOptions": () => (/* reexport safe */ _NominatimProvider__WEBPACK_IMPORTED_MODULE_2__.defaultNominatimProviderOptions),
/* harmony export */   "NominatimReverseQuery": () => (/* reexport safe */ _NominatimReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default),
/* harmony export */   "OpenStreetMapReverseQuery": () => (/* reexport safe */ _NominatimReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _NominatimGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NominatimGeocoded */ "./src/provider/nominatim/NominatimGeocoded.ts");
/* harmony import */ var _NominatimGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NominatimGeocodeQuery */ "./src/provider/nominatim/NominatimGeocodeQuery.ts");
/* harmony import */ var _NominatimProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NominatimProvider */ "./src/provider/nominatim/NominatimProvider.ts");
/* harmony import */ var _NominatimReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NominatimReverseQuery */ "./src/provider/nominatim/NominatimReverseQuery.ts");















/***/ }),

/***/ "./src/provider/opencage/OpenCageGeocodeQuery.ts":
/*!*******************************************************!*\
  !*** ./src/provider/opencage/OpenCageGeocodeQuery.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var OpenCageGeocodeQuery = /** @class */ (function (_super) {
    __extends(OpenCageGeocodeQuery, _super);
    function OpenCageGeocodeQuery(_a) {
        var countryCodes = _a.countryCodes, proximity = _a.proximity, minPrecision = _a.minPrecision, noRecord = _a.noRecord, geocodeQueryObject = __rest(_a, ["countryCodes", "proximity", "minPrecision", "noRecord"]);
        var _this = _super.call(this, geocodeQueryObject) || this;
        _this.countryCodes = countryCodes;
        if (proximity && (!proximity.latitude || !proximity.longitude)) {
            throw new Error('The "proximity" parameter must be an object with the keys: "latitude", "longitude".');
        }
        _this.proximity = proximity;
        if (minPrecision &&
            (minPrecision.toString() !==
                parseInt(minPrecision.toString(), 10).toString() ||
                minPrecision < 1 ||
                minPrecision > 10)) {
            throw new Error('The "minPrecision" parameter must be an integer from 1 to 10.');
        }
        _this.minPrecision = minPrecision;
        _this.noRecord = noRecord;
        return _this;
    }
    OpenCageGeocodeQuery.create = function (object) {
        return new this(object);
    };
    OpenCageGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, proximity: this.proximity, minPrecision: this.minPrecision, noRecord: this.noRecord });
    };
    OpenCageGeocodeQuery.prototype.withCountryCodes = function (countryCodes) {
        return new OpenCageGeocodeQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    OpenCageGeocodeQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    OpenCageGeocodeQuery.prototype.withProximity = function (proximity) {
        return new OpenCageGeocodeQuery(__assign(__assign({}, this.toObject()), { proximity: proximity }));
    };
    OpenCageGeocodeQuery.prototype.getProximity = function () {
        return this.proximity;
    };
    OpenCageGeocodeQuery.prototype.withMinPrecision = function (minPrecision) {
        return new OpenCageGeocodeQuery(__assign(__assign({}, this.toObject()), { minPrecision: minPrecision }));
    };
    OpenCageGeocodeQuery.prototype.getMinPrecision = function () {
        return this.minPrecision;
    };
    OpenCageGeocodeQuery.prototype.withNoRecord = function (noRecord) {
        return new OpenCageGeocodeQuery(__assign(__assign({}, this.toObject()), { noRecord: noRecord }));
    };
    OpenCageGeocodeQuery.prototype.getNoRecord = function () {
        return this.noRecord;
    };
    return OpenCageGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenCageGeocodeQuery);


/***/ }),

/***/ "./src/provider/opencage/OpenCageGeocoded.ts":
/*!***************************************************!*\
  !*** ./src/provider/opencage/OpenCageGeocoded.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var OpenCageGeocoded = /** @class */ (function (_super) {
    __extends(OpenCageGeocoded, _super);
    function OpenCageGeocoded(_a) {
        var callingCode = _a.callingCode, flag = _a.flag, precision = _a.precision, mgrs = _a.mgrs, maidenhead = _a.maidenhead, geohash = _a.geohash, what3words = _a.what3words, geocodedObject = __rest(_a, ["callingCode", "flag", "precision", "mgrs", "maidenhead", "geohash", "what3words"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.callingCode = callingCode;
        _this.flag = flag;
        _this.precision = precision;
        _this.mgrs = mgrs;
        _this.maidenhead = maidenhead;
        _this.geohash = geohash;
        _this.what3words = what3words;
        return _this;
    }
    OpenCageGeocoded.create = function (object) {
        return new this(object);
    };
    OpenCageGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { callingCode: this.callingCode, flag: this.flag, precision: this.precision, mgrs: this.mgrs, maidenhead: this.maidenhead, geohash: this.geohash, what3words: this.what3words });
    };
    OpenCageGeocoded.prototype.withCallingCode = function (callingCode) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { callingCode: callingCode }));
    };
    OpenCageGeocoded.prototype.getCallingCode = function () {
        return this.callingCode;
    };
    OpenCageGeocoded.prototype.withFlag = function (flag) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { flag: flag }));
    };
    OpenCageGeocoded.prototype.getFlag = function () {
        return this.flag;
    };
    OpenCageGeocoded.prototype.withPrecision = function (precision) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    OpenCageGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    OpenCageGeocoded.prototype.withMgrs = function (mgrs) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { mgrs: mgrs }));
    };
    OpenCageGeocoded.prototype.getMgrs = function () {
        return this.mgrs;
    };
    OpenCageGeocoded.prototype.withMaidenhead = function (maidenhead) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { maidenhead: maidenhead }));
    };
    OpenCageGeocoded.prototype.getMaidenhead = function () {
        return this.maidenhead;
    };
    OpenCageGeocoded.prototype.withGeohash = function (geohash) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { geohash: geohash }));
    };
    OpenCageGeocoded.prototype.getGeohash = function () {
        return this.geohash;
    };
    OpenCageGeocoded.prototype.withWhat3words = function (what3words) {
        return new OpenCageGeocoded(__assign(__assign({}, this.toObject()), { what3words: what3words }));
    };
    OpenCageGeocoded.prototype.getWhat3words = function () {
        return this.what3words;
    };
    return OpenCageGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenCageGeocoded);


/***/ }),

/***/ "./src/provider/opencage/OpenCageProvider.ts":
/*!***************************************************!*\
  !*** ./src/provider/opencage/OpenCageProvider.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultOpenCageProviderOptions": () => (/* binding */ defaultOpenCageProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/opencage/OpenCageGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/opencage/OpenCageReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.. */ "./src/provider/opencage/OpenCageGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error */ "./src/error/ResponseError.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultOpenCageProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "" });
var OpenCageProvider = /** @class */ (function () {
    function OpenCageProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultOpenCageProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultOpenCageProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the OpenCage provider. Please add it in the "apiKey" option.');
        }
    }
    OpenCageProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The OpenCage provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "api.opencagedata.com",
            pathname: "geocode/v1/json",
        });
        var params = this.withCommonParams({
            q: geocodeQuery.getText() || "",
            bounds: geocodeQuery.getBounds()
                ? ((_a = geocodeQuery.getBounds()) === null || _a === void 0 ? void 0 : _a.longitudeSW) + "," + ((_b = geocodeQuery.getBounds()) === null || _b === void 0 ? void 0 : _b.latitudeSW) + "," + ((_c = geocodeQuery.getBounds()) === null || _c === void 0 ? void 0 : _c.longitudeNE) + "," + ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.latitudeNE)
                : undefined,
            proximity: geocodeQuery.getProximity()
                ? ((_e = geocodeQuery.getProximity()) === null || _e === void 0 ? void 0 : _e.latitude) + "," + ((_f = geocodeQuery.getProximity()) === null || _f === void 0 ? void 0 : _f.longitude)
                : undefined,
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    OpenCageProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_3__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "api.opencagedata.com",
            pathname: "geocode/v1/json",
        });
        var params = this.withCommonParams({
            q: reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    OpenCageProvider.prototype.withCommonParams = function (params, query) {
        var _a, _b, _c, _d;
        return __assign(__assign({}, params), { key: this.options.apiKey || "", countrycode: query.getCountryCodes()
                ? (_a = query.getCountryCodes()) === null || _a === void 0 ? void 0 : _a.join(",")
                : (_b = this.options.countryCodes) === null || _b === void 0 ? void 0 : _b.join(","), language: query.getLocale(), limit: query.getLimit().toString(), min_confidence: (_c = query.getMinPrecision()) === null || _c === void 0 ? void 0 : _c.toString(), no_record: (_d = query.getNoRecord()) === null || _d === void 0 ? void 0 : _d.toString(), jsonpCallback: this.options.useJsonp ? "jsonp" : undefined });
    };
    OpenCageProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.results.map(function (result) {
                return OpenCageProvider.mapToGeocoded(result);
            }));
        }, headers, body, function (error) {
            var response = error.getResponse();
            response.json().then(function (data) {
                if (data.status) {
                    var errorMessage_1;
                    switch (data.status.code) {
                        case 400:
                            errorMessage_1 = "Invalid request (400): " + data.status.message;
                            break;
                        case 401:
                            errorMessage_1 = "Unable to authenticate (401): " + data.status.message;
                            break;
                        case 402:
                            errorMessage_1 = "Quota exceeded (402): " + data.status.message;
                            break;
                        case 403:
                            errorMessage_1 = "Forbidden (403): " + data.status.message;
                            break;
                        case 404:
                            errorMessage_1 = "Invalid API endpoint (404): " + data.status.message;
                            break;
                        case 405:
                            errorMessage_1 = "Method not allowed (405): " + data.status.message;
                            break;
                        case 408:
                            errorMessage_1 = "Timeout (408): " + data.status.message;
                            break;
                        case 410:
                            errorMessage_1 = "Request too long (410): " + data.status.message;
                            break;
                        case 429:
                            errorMessage_1 = "Too many requests (429): " + data.status.message;
                            break;
                        case 503:
                            errorMessage_1 = "Internal server error (503): " + data.status.message;
                            break;
                        default:
                            errorMessage_1 = "Error (" + data.status.code + "): " + data.status.message;
                    }
                    if (errorCallback) {
                        errorCallback(new _error__WEBPACK_IMPORTED_MODULE_4__.default(errorMessage_1, data));
                        return;
                    }
                    setTimeout(function () {
                        throw new Error(errorMessage_1);
                    });
                }
            });
        });
    };
    OpenCageProvider.mapToGeocoded = function (result) {
        var _a;
        var latitude = result.geometry.lat;
        var longitude = result.geometry.lng;
        var formattedAddress = result.formatted;
        var streetNumber = result.components.house_number;
        var postalCode = result.components.postcode;
        var region = result.components.state;
        var country = result.components.country;
        var countryCode = result.components.country_code;
        var timezone = result.annotations.timezone.name;
        var callingCode = result.annotations.callingcode;
        var flag = result.annotations.flag;
        var precision = result.confidence;
        var mgrs = result.annotations.MGRS;
        var maidenhead = result.annotations.Maidenhead;
        var geohash = result.annotations.geohash;
        var what3words = (_a = result.annotations.what3words) === null || _a === void 0 ? void 0 : _a.words;
        var streetName = result.components.road ||
            result.components.footway ||
            result.components.street ||
            result.components.street_name ||
            result.components.residential ||
            result.components.path ||
            result.components.pedestrian ||
            result.components.road_reference ||
            result.components.road_reference_intl;
        var subLocality = result.components.neighbourhood ||
            result.components.suburb ||
            result.components.city_district ||
            result.components.district ||
            result.components.quarter ||
            result.components.houses ||
            result.components.subdivision;
        var locality = result.components.city ||
            result.components.town ||
            result.components.municipality ||
            result.components.village ||
            result.components.hamlet ||
            result.components.locality ||
            result.components.croft;
        var geocoded = ___WEBPACK_IMPORTED_MODULE_5__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            formattedAddress: formattedAddress,
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            timezone: timezone,
            callingCode: callingCode,
            flag: flag,
            precision: precision,
            mgrs: mgrs,
            maidenhead: maidenhead,
            geohash: geohash,
            what3words: what3words,
        });
        if (result.bounds) {
            geocoded = geocoded.withBounds({
                latitudeSW: result.bounds.southwest.lat,
                longitudeSW: result.bounds.southwest.lng,
                latitudeNE: result.bounds.northeast.lat,
                longitudeNE: result.bounds.northeast.lng,
            });
        }
        var adminLevels = [
            { nameKey: "state", codeKey: "state_code" },
            { nameKey: "county", codeKey: "county_code" },
        ];
        adminLevels.forEach(function (_a, level) {
            var nameKey = _a.nameKey, codeKey = _a.codeKey;
            if (result.components[nameKey]) {
                geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                    level: level + 1,
                    name: result.components[nameKey] || "",
                    code: result.components[codeKey] || undefined,
                }));
            }
        });
        return geocoded;
    };
    return OpenCageProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenCageProvider);


/***/ }),

/***/ "./src/provider/opencage/OpenCageReverseQuery.ts":
/*!*******************************************************!*\
  !*** ./src/provider/opencage/OpenCageReverseQuery.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var OpenCageReverseQuery = /** @class */ (function (_super) {
    __extends(OpenCageReverseQuery, _super);
    function OpenCageReverseQuery(_a) {
        var countryCodes = _a.countryCodes, minPrecision = _a.minPrecision, noRecord = _a.noRecord, reverseQueryObject = __rest(_a, ["countryCodes", "minPrecision", "noRecord"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        _this.countryCodes = countryCodes;
        if (minPrecision &&
            (minPrecision.toString() !==
                parseInt(minPrecision.toString(), 10).toString() ||
                minPrecision < 1 ||
                minPrecision > 10)) {
            throw new Error('The "minPrecision" parameter must be an integer from 1 to 10.');
        }
        _this.minPrecision = minPrecision;
        _this.noRecord = noRecord;
        return _this;
    }
    OpenCageReverseQuery.create = function (object) {
        return new this(object);
    };
    OpenCageReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { countryCodes: this.countryCodes, minPrecision: this.minPrecision, noRecord: this.noRecord });
    };
    OpenCageReverseQuery.prototype.withCountryCodes = function (countryCodes) {
        return new OpenCageReverseQuery(__assign(__assign({}, this.toObject()), { countryCodes: countryCodes }));
    };
    OpenCageReverseQuery.prototype.getCountryCodes = function () {
        return this.countryCodes;
    };
    OpenCageReverseQuery.prototype.withMinPrecision = function (minPrecision) {
        return new OpenCageReverseQuery(__assign(__assign({}, this.toObject()), { minPrecision: minPrecision }));
    };
    OpenCageReverseQuery.prototype.getMinPrecision = function () {
        return this.minPrecision;
    };
    OpenCageReverseQuery.prototype.withNoRecord = function (noRecord) {
        return new OpenCageReverseQuery(__assign(__assign({}, this.toObject()), { noRecord: noRecord }));
    };
    OpenCageReverseQuery.prototype.getNoRecord = function () {
        return this.noRecord;
    };
    return OpenCageReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenCageReverseQuery);


/***/ }),

/***/ "./src/provider/opencage/index.ts":
/*!****************************************!*\
  !*** ./src/provider/opencage/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OpenCageGeocoded": () => (/* reexport safe */ _OpenCageGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "OpenCageGeocodeQuery": () => (/* reexport safe */ _OpenCageGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "OpenCageProvider": () => (/* reexport safe */ _OpenCageProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "defaultOpenCageProviderOptions": () => (/* reexport safe */ _OpenCageProvider__WEBPACK_IMPORTED_MODULE_2__.defaultOpenCageProviderOptions),
/* harmony export */   "OpenCageReverseQuery": () => (/* reexport safe */ _OpenCageReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _OpenCageGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OpenCageGeocoded */ "./src/provider/opencage/OpenCageGeocoded.ts");
/* harmony import */ var _OpenCageGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OpenCageGeocodeQuery */ "./src/provider/opencage/OpenCageGeocodeQuery.ts");
/* harmony import */ var _OpenCageProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OpenCageProvider */ "./src/provider/opencage/OpenCageProvider.ts");
/* harmony import */ var _OpenCageReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenCageReverseQuery */ "./src/provider/opencage/OpenCageReverseQuery.ts");









/***/ }),

/***/ "./src/provider/yandex/YandexGeocodeQuery.ts":
/*!***************************************************!*\
  !*** ./src/provider/yandex/YandexGeocodeQuery.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/GeocodeQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var YandexGeocodeQuery = /** @class */ (function (_super) {
    __extends(YandexGeocodeQuery, _super);
    function YandexGeocodeQuery(_a) {
        var bounded = _a.bounded, proximity = _a.proximity, span = _a.span, skip = _a.skip, bounds = _a.bounds, geocodeQueryObject = __rest(_a, ["bounded", "proximity", "span", "skip", "bounds"]);
        var _this = _super.call(this, __assign({ bounds: bounds }, geocodeQueryObject)) || this;
        if (bounded && (!bounds || !proximity)) {
            throw new Error('The "bounded" parameter can only be used with the "bounds" or "proximity" parameter.');
        }
        _this.bounded = bounded;
        if (proximity && (!proximity.latitude || !proximity.longitude)) {
            throw new Error('The "proximity" parameter must be an object with the keys: "latitude", "longitude".');
        }
        _this.proximity = proximity;
        if (span && !proximity) {
            throw new Error('The "proximity" parameter must be defined to use the "span" parameter.');
        }
        if (span && (!span.spanLatitude || !span.spanLongitude)) {
            throw new Error('The "span" parameter must be an object with the keys: "spanLatitude", "spanLongitude".');
        }
        _this.span = span;
        if (bounds && proximity) {
            throw new Error('The "bounds" and "proximity" parameters cannot be used at the same time.');
        }
        _this.skip = skip;
        return _this;
    }
    YandexGeocodeQuery.create = function (object) {
        return new this(object);
    };
    YandexGeocodeQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { bounded: this.bounded, proximity: this.proximity, span: this.span, skip: this.skip });
    };
    YandexGeocodeQuery.prototype.withBounded = function (bounded) {
        return new YandexGeocodeQuery(__assign(__assign({}, this.toObject()), { bounded: bounded }));
    };
    YandexGeocodeQuery.prototype.getBounded = function () {
        return this.bounded;
    };
    YandexGeocodeQuery.prototype.withProximity = function (proximity) {
        return new YandexGeocodeQuery(__assign(__assign({}, this.toObject()), { proximity: proximity }));
    };
    YandexGeocodeQuery.prototype.getProximity = function () {
        return this.proximity;
    };
    YandexGeocodeQuery.prototype.withSpan = function (span) {
        return new YandexGeocodeQuery(__assign(__assign({}, this.toObject()), { span: span }));
    };
    YandexGeocodeQuery.prototype.getSpan = function () {
        return this.span;
    };
    YandexGeocodeQuery.prototype.withSkip = function (skip) {
        return new YandexGeocodeQuery(__assign(__assign({}, this.toObject()), { skip: skip }));
    };
    YandexGeocodeQuery.prototype.getSkip = function () {
        return this.skip;
    };
    return YandexGeocodeQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YandexGeocodeQuery);


/***/ }),

/***/ "./src/provider/yandex/YandexGeocoded.ts":
/*!***********************************************!*\
  !*** ./src/provider/yandex/YandexGeocoded.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Geocoded */ "./src/Geocoded.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var YandexGeocoded = /** @class */ (function (_super) {
    __extends(YandexGeocoded, _super);
    function YandexGeocoded(_a) {
        var types = _a.types, precision = _a.precision, geocodedObject = __rest(_a, ["types", "precision"]);
        var _this = _super.call(this, geocodedObject) || this;
        _this.types = types;
        _this.precision = precision;
        return _this;
    }
    YandexGeocoded.create = function (object) {
        return new this(object);
    };
    YandexGeocoded.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { types: this.types, precision: this.precision });
    };
    YandexGeocoded.prototype.withTypes = function (types) {
        return new YandexGeocoded(__assign(__assign({}, this.toObject()), { types: types }));
    };
    YandexGeocoded.prototype.getTypes = function () {
        return this.types;
    };
    YandexGeocoded.prototype.withPrecision = function (precision) {
        return new YandexGeocoded(__assign(__assign({}, this.toObject()), { precision: precision }));
    };
    YandexGeocoded.prototype.getPrecision = function () {
        return this.precision;
    };
    return YandexGeocoded;
}(_Geocoded__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YandexGeocoded);


/***/ }),

/***/ "./src/provider/yandex/YandexProvider.ts":
/*!***********************************************!*\
  !*** ./src/provider/yandex/YandexProvider.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultYandexProviderOptions": () => (/* binding */ defaultYandexProviderOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderInterface.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.. */ "./src/provider/ProviderHelpers.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.. */ "./src/provider/yandex/YandexGeocodeQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.. */ "./src/provider/yandex/YandexReverseQuery.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.. */ "./src/provider/yandex/YandexGeocoded.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils */ "./src/utils.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



var defaultYandexProviderOptions = __assign(__assign({}, ___WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions), { apiKey: "" });
var YandexProvider = /** @class */ (function () {
    function YandexProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultYandexProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultYandexProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the Yandex provider. Please add it in the "apiKey" option.');
        }
    }
    YandexProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var geocodeQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getGeocodeQueryFromParameter(query, ___WEBPACK_IMPORTED_MODULE_2__.default);
        if (geocodeQuery.getIp()) {
            throw new Error("The Yandex provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "geocode-maps.yandex.ru",
            pathname: "1.x",
        });
        var rspn;
        if (geocodeQuery.getBounded() === false) {
            rspn = "0";
        }
        else if (geocodeQuery.getBounded() === true) {
            rspn = "1";
        }
        var params = this.withCommonParams({
            geocode: geocodeQuery.getText() || "",
            rspn: rspn,
            ll: geocodeQuery.getProximity()
                ? ((_a = geocodeQuery.getProximity()) === null || _a === void 0 ? void 0 : _a.longitude) + "," + ((_b = geocodeQuery.getProximity()) === null || _b === void 0 ? void 0 : _b.latitude)
                : undefined,
            spn: geocodeQuery.getSpan()
                ? ((_c = geocodeQuery.getSpan()) === null || _c === void 0 ? void 0 : _c.spanLongitude) + "," + ((_d = geocodeQuery.getSpan()) === null || _d === void 0 ? void 0 : _d.spanLatitude)
                : undefined,
            bbox: geocodeQuery.getBounds()
                ? ((_e = geocodeQuery.getBounds()) === null || _e === void 0 ? void 0 : _e.longitudeSW) + "," + ((_f = geocodeQuery.getBounds()) === null || _f === void 0 ? void 0 : _f.latitudeSW) + "~" + ((_g = geocodeQuery.getBounds()) === null || _g === void 0 ? void 0 : _g.longitudeNE) + "," + ((_h = geocodeQuery.getBounds()) === null || _h === void 0 ? void 0 : _h.latitudeNE)
                : undefined,
        }, geocodeQuery);
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, {}, errorCallback);
    };
    YandexProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var _a;
        var reverseQuery = ___WEBPACK_IMPORTED_MODULE_1__.default.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback, ___WEBPACK_IMPORTED_MODULE_3__.default);
        var reverseCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ___WEBPACK_IMPORTED_MODULE_1__.default.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            protocol: this.options.useSsl ? "https" : "http",
            host: "geocode-maps.yandex.ru",
            pathname: "1.x",
        });
        var params = this.withCommonParams({
            geocode: reverseQuery.getCoordinates().longitude + "," + reverseQuery.getCoordinates().latitude,
            kind: reverseQuery.getTypes()
                ? (_a = reverseQuery.getTypes()) === null || _a === void 0 ? void 0 : _a[0]
                : undefined,
        }, reverseQuery);
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, {}, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, {}, reverseErrorCallback);
    };
    YandexProvider.prototype.withCommonParams = function (params, query) {
        var _a;
        return __assign(__assign({}, params), { apikey: this.options.apiKey, format: "json", lang: query.getLocale(), results: query.getLimit().toString(), skip: (_a = query.getSkip()) === null || _a === void 0 ? void 0 : _a.toString(), jsonpCallback: this.options.useJsonp ? "callback" : undefined });
    };
    YandexProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            callback(data.response.GeoObjectCollection.featureMember.map(function (result) {
                return YandexProvider.mapToGeocoded(result.GeoObject);
            }));
        }, headers, body, errorCallback);
    };
    YandexProvider.mapToGeocoded = function (result) {
        var point = result.Point.pos.split(" ");
        var latitude = parseFloat(point[1]);
        var longitude = parseFloat(point[0]);
        var addressDetails = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.flattenObject)(result.metaDataProperty.GeocoderMetaData.AddressDetails);
        var streetNumber = addressDetails.PremiseNumber;
        var streetName = addressDetails.ThoroughfareName;
        var subLocality = addressDetails.DependentLocalityName;
        var locality = addressDetails.LocalityName;
        var region = addressDetails.AdministrativeAreaName;
        var country = addressDetails.CountryName;
        var countryCode = addressDetails.CountryNameCode;
        var types = [result.metaDataProperty.GeocoderMetaData.kind];
        var precision = result.metaDataProperty.GeocoderMetaData.precision;
        var geocoded = ___WEBPACK_IMPORTED_MODULE_5__.default.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            streetNumber: streetNumber,
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            region: region,
            country: country,
            countryCode: countryCode,
            types: types,
            precision: precision,
        });
        var adminLevels = ["AdministrativeAreaName", "SubAdministrativeAreaName"];
        adminLevels.forEach(function (adminLevel, level) {
            if (addressDetails[adminLevel]) {
                geocoded.addAdminLevel(_AdminLevel__WEBPACK_IMPORTED_MODULE_6__.default.create({
                    level: level + 1,
                    name: addressDetails[adminLevel] || "",
                }));
            }
        });
        var lowerCorner = result.boundedBy.Envelope.lowerCorner.split(" ");
        var upperCorner = result.boundedBy.Envelope.upperCorner.split(" ");
        geocoded = geocoded.withBounds({
            latitudeSW: parseFloat(lowerCorner[1]),
            longitudeSW: parseFloat(lowerCorner[0]),
            latitudeNE: parseFloat(upperCorner[1]),
            longitudeNE: parseFloat(upperCorner[0]),
        });
        return geocoded;
    };
    return YandexProvider;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YandexProvider);


/***/ }),

/***/ "./src/provider/yandex/YandexReverseQuery.ts":
/*!***************************************************!*\
  !*** ./src/provider/yandex/YandexReverseQuery.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../query */ "./src/query/ReverseQuery.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var YandexReverseQuery = /** @class */ (function (_super) {
    __extends(YandexReverseQuery, _super);
    function YandexReverseQuery(_a) {
        var types = _a.types, skip = _a.skip, reverseQueryObject = __rest(_a, ["types", "skip"]);
        var _this = _super.call(this, reverseQueryObject) || this;
        if (types && types.length > 1) {
            throw new Error('The "types" parameter must contain only one location type.');
        }
        _this.types = types;
        _this.skip = skip;
        return _this;
    }
    YandexReverseQuery.create = function (object) {
        return new this(object);
    };
    YandexReverseQuery.prototype.toObject = function () {
        return __assign(__assign({}, _super.prototype.toObject.call(this)), { types: this.types, skip: this.skip });
    };
    YandexReverseQuery.prototype.withTypes = function (types) {
        return new YandexReverseQuery(__assign(__assign({}, this.toObject()), { types: types }));
    };
    YandexReverseQuery.prototype.getTypes = function () {
        return this.types;
    };
    YandexReverseQuery.prototype.withSkip = function (skip) {
        return new YandexReverseQuery(__assign(__assign({}, this.toObject()), { skip: skip }));
    };
    YandexReverseQuery.prototype.getSkip = function () {
        return this.skip;
    };
    return YandexReverseQuery;
}(_query__WEBPACK_IMPORTED_MODULE_0__.default));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YandexReverseQuery);


/***/ }),

/***/ "./src/provider/yandex/index.ts":
/*!**************************************!*\
  !*** ./src/provider/yandex/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YandexGeocoded": () => (/* reexport safe */ _YandexGeocoded__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "YandexGeocodeQuery": () => (/* reexport safe */ _YandexGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__.default),
/* harmony export */   "YandexProvider": () => (/* reexport safe */ _YandexProvider__WEBPACK_IMPORTED_MODULE_2__.default),
/* harmony export */   "defaultYandexProviderOptions": () => (/* reexport safe */ _YandexProvider__WEBPACK_IMPORTED_MODULE_2__.defaultYandexProviderOptions),
/* harmony export */   "YandexReverseQuery": () => (/* reexport safe */ _YandexReverseQuery__WEBPACK_IMPORTED_MODULE_3__.default)
/* harmony export */ });
/* harmony import */ var _YandexGeocoded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./YandexGeocoded */ "./src/provider/yandex/YandexGeocoded.ts");
/* harmony import */ var _YandexGeocodeQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./YandexGeocodeQuery */ "./src/provider/yandex/YandexGeocodeQuery.ts");
/* harmony import */ var _YandexProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./YandexProvider */ "./src/provider/yandex/YandexProvider.ts");
/* harmony import */ var _YandexReverseQuery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./YandexReverseQuery */ "./src/provider/yandex/YandexReverseQuery.ts");









/***/ }),

/***/ "./src/query/GeocodeQuery.ts":
/*!***********************************!*\
  !*** ./src/query/GeocodeQuery.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider */ "./src/provider/ProviderInterface.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var GeocodeQuery = /** @class */ (function () {
    function GeocodeQuery(_a) {
        var text = _a.text, ip = _a.ip, bounds = _a.bounds, locale = _a.locale, _b = _a.limit, limit = _b === void 0 ? _provider__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RESULT_LIMIT : _b;
        this.limit = _provider__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RESULT_LIMIT;
        this.text = text;
        this.ip = ip;
        if (!text && !ip) {
            throw new Error('Either "text" or "ip" parameter is required.');
        }
        if (bounds &&
            (!bounds.latitudeSW ||
                !bounds.longitudeSW ||
                !bounds.latitudeNE ||
                !bounds.longitudeNE)) {
            throw new Error('The "bounds" parameter must be an object with the keys: "latitudeSW", "longitudeSW", "latitudeNE", "longitudeNE".');
        }
        this.bounds = bounds;
        this.locale = locale;
        this.limit = limit;
    }
    GeocodeQuery.create = function (object) {
        return new this(object);
    };
    GeocodeQuery.prototype.toObject = function () {
        return {
            text: this.text,
            ip: this.ip,
            bounds: this.bounds,
            locale: this.locale,
            limit: this.limit,
        };
    };
    GeocodeQuery.prototype.withText = function (text) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { text: text }));
    };
    GeocodeQuery.prototype.withIp = function (ip) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { ip: ip }));
    };
    GeocodeQuery.prototype.withBounds = function (bounds) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { bounds: bounds }));
    };
    GeocodeQuery.prototype.withLocale = function (locale) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { locale: locale }));
    };
    GeocodeQuery.prototype.withLimit = function (limit) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { limit: limit }));
    };
    GeocodeQuery.prototype.getText = function () {
        return this.text;
    };
    GeocodeQuery.prototype.getIp = function () {
        return this.ip;
    };
    GeocodeQuery.prototype.getBounds = function () {
        return this.bounds;
    };
    GeocodeQuery.prototype.getLocale = function () {
        return this.locale;
    };
    GeocodeQuery.prototype.getLimit = function () {
        return this.limit;
    };
    return GeocodeQuery;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeocodeQuery);


/***/ }),

/***/ "./src/query/ReverseQuery.ts":
/*!***********************************!*\
  !*** ./src/query/ReverseQuery.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider */ "./src/provider/ProviderInterface.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var ReverseQuery = /** @class */ (function () {
    function ReverseQuery(_a) {
        var coordinates = _a.coordinates, locale = _a.locale, _b = _a.limit, limit = _b === void 0 ? _provider__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RESULT_LIMIT : _b;
        this.limit = _provider__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RESULT_LIMIT;
        if (coordinates && (!coordinates.latitude || !coordinates.longitude)) {
            throw new Error('The "coordinates" parameter must be an object with the keys: "latitude", "longitude".');
        }
        this.coordinates = coordinates;
        this.locale = locale;
        this.limit = limit;
    }
    ReverseQuery.create = function (object) {
        return new this(object);
    };
    ReverseQuery.prototype.toObject = function () {
        return {
            coordinates: this.coordinates,
            locale: this.locale,
            limit: this.limit,
        };
    };
    ReverseQuery.prototype.withCoordinates = function (coordinates) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { coordinates: coordinates }));
    };
    ReverseQuery.prototype.withLocale = function (locale) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { locale: locale }));
    };
    ReverseQuery.prototype.withLimit = function (limit) {
        return this.constructor.create(__assign(__assign({}, this.toObject()), { limit: limit }));
    };
    ReverseQuery.prototype.getCoordinates = function () {
        return this.coordinates;
    };
    ReverseQuery.prototype.getLocale = function () {
        return this.locale;
    };
    ReverseQuery.prototype.getLimit = function () {
        return this.limit;
    };
    return ReverseQuery;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReverseQuery);


/***/ }),

/***/ "./src/query/index.ts":
/*!****************************!*\
  !*** ./src/query/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeocodeQuery": () => (/* reexport safe */ _GeocodeQuery__WEBPACK_IMPORTED_MODULE_0__.default),
/* harmony export */   "ReverseQuery": () => (/* reexport safe */ _ReverseQuery__WEBPACK_IMPORTED_MODULE_1__.default)
/* harmony export */ });
/* harmony import */ var _GeocodeQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeocodeQuery */ "./src/query/GeocodeQuery.ts");
/* harmony import */ var _ReverseQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ReverseQuery */ "./src/query/ReverseQuery.ts");






/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBrowser": () => (/* binding */ isBrowser),
/* harmony export */   "filterUndefinedObjectValues": () => (/* binding */ filterUndefinedObjectValues),
/* harmony export */   "flattenObject": () => (/* binding */ flattenObject),
/* harmony export */   "decodeUrlSafeBase64": () => (/* binding */ decodeUrlSafeBase64),
/* harmony export */   "encodeUrlSafeBase64": () => (/* binding */ encodeUrlSafeBase64),
/* harmony export */   "decodeBase64": () => (/* binding */ decodeBase64),
/* harmony export */   "isIpv4": () => (/* binding */ isIpv4),
/* harmony export */   "isIpv6": () => (/* binding */ isIpv6),
/* harmony export */   "getRequireFunc": () => (/* binding */ getRequireFunc)
/* harmony export */ });
var isBrowser = function () { return typeof window !== "undefined"; };
var filterUndefinedObjectValues = function (object) {
    return Object.keys(object).reduce(function (acc, key) {
        var filtered = acc;
        var value = object[key];
        if (value !== undefined) {
            filtered[key] = value;
        }
        return filtered;
    }, {});
};
var flattenObject = function (object) {
    var flattened = {};
    var isNested = function (value) {
        var isArray = Array.isArray(value);
        var type = Object.prototype.toString.call(value);
        var isObject = type === "[object Object]" || type === "[object Array]";
        if (!isArray && isObject && Object.keys(value).length) {
            return true;
        }
        return false;
    };
    var step = function (nestedObject) {
        Object.keys(nestedObject).forEach(function (key) {
            var value = nestedObject[key];
            if (undefined === value) {
                return;
            }
            if (isNested(value)) {
                step(value);
                return;
            }
            flattened[key] = value;
        });
    };
    step(object);
    return flattened;
};
/**
 * Decode from URL-safe base64 to true base64.
 */
var decodeUrlSafeBase64 = function (safe) {
    return safe.replace(/-/g, "+").replace(/_/g, "/");
};
/**
 * Encode from true base64 to URL-safe base64.
 */
var encodeUrlSafeBase64 = function (base64) {
    return base64.replace(/\+/g, "-").replace(/\//g, "_");
};
var decodeBase64 = function (base64) {
    if (isBrowser()) {
        throw new Error("decodeBase64 can only be used in a Node environment.");
    }
    return Buffer.from(base64, "base64").toString();
};
// From https://github.com/sindresorhus/ip-regex
var ipv4RegExp = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
var isIpv4 = function (ip) {
    return new RegExp("^" + ipv4RegExp + "$").test(ip);
};
// From https://github.com/sindresorhus/ip-regex
var ipv6Seg = "[a-fA-F\\d]{1,4}";
var ipv6RegExp = "((?:" + ipv6Seg + ":){7}(?:" + ipv6Seg + "|:)|(?:" + ipv6Seg + ":){6}(?:" + ipv4RegExp + "|:" + ipv6Seg + "|:)|(?:" + ipv6Seg + ":){5}(?::" + ipv4RegExp + "|(:" + ipv6Seg + "){1,2}|:)|(?:" + ipv6Seg + ":){4}(?:(:" + ipv6Seg + "){0,1}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,3}|:)|(?:" + ipv6Seg + ":){3}(?:(:" + ipv6Seg + "){0,2}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,4}|:)|(?:" + ipv6Seg + ":){2}(?:(:" + ipv6Seg + "){0,3}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,5}|:)|(?:" + ipv6Seg + ":){1}(?:(:" + ipv6Seg + "){0,4}:" + ipv4RegExp + "|(:" + ipv6Seg + "){1,6}|:)|(?::((?::" + ipv6Seg + "){0,5}:" + ipv4RegExp + "|(?::" + ipv6Seg + "){1,7}|:)))(%[0-9a-zA-Z]{1,})?";
var isIpv6 = function (ip) {
    return new RegExp("^" + ipv6RegExp + "$").test(ip);
};
// eslint-disable-next-line @typescript-eslint/ban-types
var getRequireFunc = function () {
    // eslint-disable-next-line camelcase
    return typeof require === "function"
        ? // eslint-disable-next-line camelcase
            require
        : __webpack_require__("./src sync recursive");
};


/***/ }),

/***/ "./src sync recursive":
/*!*******************!*\
  !*** ./src/ sync ***!
  \*******************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./src sync recursive";
module.exports = webpackEmptyContext;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BingGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.BingGeocoded),
/* harmony export */   "BingProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.BingProvider),
/* harmony export */   "ChainProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.ChainProvider),
/* harmony export */   "DEFAULT_RESULT_LIMIT": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_RESULT_LIMIT),
/* harmony export */   "GeoPluginGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GeoPluginGeocoded),
/* harmony export */   "GeoPluginProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GeoPluginProvider),
/* harmony export */   "GoogleMapsGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GoogleMapsGeocodeQuery),
/* harmony export */   "GoogleMapsGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GoogleMapsGeocoded),
/* harmony export */   "GoogleMapsProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GoogleMapsProvider),
/* harmony export */   "GoogleMapsReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.GoogleMapsReverseQuery),
/* harmony export */   "LocationIQGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.LocationIQGeocodeQuery),
/* harmony export */   "LocationIQGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.LocationIQGeocoded),
/* harmony export */   "LocationIQProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.LocationIQProvider),
/* harmony export */   "LocationIQReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.LocationIQReverseQuery),
/* harmony export */   "MAPBOX_SOURCES": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MAPBOX_SOURCES),
/* harmony export */   "MapQuestGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapQuestGeocodeQuery),
/* harmony export */   "MapQuestGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapQuestGeocoded),
/* harmony export */   "MapQuestLocation": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapQuestLocation),
/* harmony export */   "MapQuestProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapQuestProvider),
/* harmony export */   "MapboxGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapboxGeocodeQuery),
/* harmony export */   "MapboxGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapboxGeocoded),
/* harmony export */   "MapboxProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapboxProvider),
/* harmony export */   "MapboxReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.MapboxReverseQuery),
/* harmony export */   "NominatimGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.NominatimGeocodeQuery),
/* harmony export */   "NominatimGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.NominatimGeocoded),
/* harmony export */   "NominatimProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.NominatimProvider),
/* harmony export */   "NominatimReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.NominatimReverseQuery),
/* harmony export */   "OpenCageGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenCageGeocodeQuery),
/* harmony export */   "OpenCageGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenCageGeocoded),
/* harmony export */   "OpenCageProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenCageProvider),
/* harmony export */   "OpenCageReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenCageReverseQuery),
/* harmony export */   "OpenStreetMapGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenStreetMapGeocodeQuery),
/* harmony export */   "OpenStreetMapGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenStreetMapGeocoded),
/* harmony export */   "OpenStreetMapProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenStreetMapProvider),
/* harmony export */   "OpenStreetMapReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.OpenStreetMapReverseQuery),
/* harmony export */   "ProviderHelpers": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.ProviderHelpers),
/* harmony export */   "YandexGeocodeQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.YandexGeocodeQuery),
/* harmony export */   "YandexGeocoded": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.YandexGeocoded),
/* harmony export */   "YandexProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.YandexProvider),
/* harmony export */   "YandexReverseQuery": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.YandexReverseQuery),
/* harmony export */   "defaultBingProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultBingProviderOptions),
/* harmony export */   "defaultChainProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultChainProviderOptions),
/* harmony export */   "defaultLocationIQProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultLocationIQProviderOptions),
/* harmony export */   "defaultMapQuestProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultMapQuestProviderOptions),
/* harmony export */   "defaultMapboxProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultMapboxProviderOptions),
/* harmony export */   "defaultNominatimProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultNominatimProviderOptions),
/* harmony export */   "defaultOpenCageProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultOpenCageProviderOptions),
/* harmony export */   "defaultOpenStreetMapProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultOpenStreetMapProviderOptions),
/* harmony export */   "defaultProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultProviderOptions),
/* harmony export */   "defaultYandexProviderOptions": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.defaultYandexProviderOptions),
/* harmony export */   "GeocodeQuery": () => (/* reexport safe */ _query__WEBPACK_IMPORTED_MODULE_1__.GeocodeQuery),
/* harmony export */   "ReverseQuery": () => (/* reexport safe */ _query__WEBPACK_IMPORTED_MODULE_1__.ReverseQuery),
/* harmony export */   "decodeBase64": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.decodeBase64),
/* harmony export */   "decodeUrlSafeBase64": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.decodeUrlSafeBase64),
/* harmony export */   "encodeUrlSafeBase64": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.encodeUrlSafeBase64),
/* harmony export */   "filterUndefinedObjectValues": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.filterUndefinedObjectValues),
/* harmony export */   "flattenObject": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.flattenObject),
/* harmony export */   "getRequireFunc": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.getRequireFunc),
/* harmony export */   "isBrowser": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.isBrowser),
/* harmony export */   "isIpv4": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.isIpv4),
/* harmony export */   "isIpv6": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.isIpv6),
/* harmony export */   "AdminLevel": () => (/* reexport safe */ _AdminLevel__WEBPACK_IMPORTED_MODULE_3__.default),
/* harmony export */   "ADMIN_LEVEL_CODES": () => (/* reexport safe */ _AdminLevel__WEBPACK_IMPORTED_MODULE_3__.ADMIN_LEVEL_CODES),
/* harmony export */   "ExternalLoader": () => (/* reexport safe */ _ExternalLoader__WEBPACK_IMPORTED_MODULE_4__.default),
/* harmony export */   "Geocoded": () => (/* reexport safe */ _Geocoded__WEBPACK_IMPORTED_MODULE_5__.default),
/* harmony export */   "GeocoderProviderFactory": () => (/* reexport safe */ _GeocoderProviderFactory__WEBPACK_IMPORTED_MODULE_6__.default),
/* harmony export */   "GeoJsonDumper": () => (/* reexport safe */ _GeoJsonDumper__WEBPACK_IMPORTED_MODULE_7__.default),
/* harmony export */   "default": () => (/* reexport safe */ _UniversalGeocoder__WEBPACK_IMPORTED_MODULE_8__.default)
/* harmony export */ });
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider */ "./src/provider/index.ts");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query */ "./src/query/index.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var _AdminLevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AdminLevel */ "./src/AdminLevel.ts");
/* harmony import */ var _ExternalLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ExternalLoader */ "./src/ExternalLoader.ts");
/* harmony import */ var _Geocoded__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Geocoded */ "./src/Geocoded.ts");
/* harmony import */ var _GeocoderProviderFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GeocoderProviderFactory */ "./src/GeocoderProviderFactory.ts");
/* harmony import */ var _GeoJsonDumper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GeoJsonDumper */ "./src/GeoJsonDumper.ts");
/* harmony import */ var _UniversalGeocoder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./UniversalGeocoder */ "./src/UniversalGeocoder.ts");















})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***********************!*\
  !*** ./src/global.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _UniversalGeocoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UniversalGeocoder */ "./src/UniversalGeocoder.ts");
/* harmony import */ var _GeoJsonDumper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeoJsonDumper */ "./src/GeoJsonDumper.ts");


var container = typeof window === "object" ? window : {};
container.UniversalGeocoder = _UniversalGeocoder__WEBPACK_IMPORTED_MODULE_0__.default;
container.GeoJsonDumper = _GeoJsonDumper__WEBPACK_IMPORTED_MODULE_1__.default;

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,