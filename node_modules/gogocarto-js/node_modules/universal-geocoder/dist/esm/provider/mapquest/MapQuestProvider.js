var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { MapQuestGeocoded, MapQuestGeocodeQuery, ProviderHelpers, defaultProviderOptions, } from "./..";
import AdminLevel, { ADMIN_LEVEL_CODES } from "../../AdminLevel";
import { ResponseError } from "../../error";
export var defaultMapQuestProviderOptions = __assign(__assign({}, defaultProviderOptions), { apiKey: "", method: "GET", source: "mapquest" });
var MapQuestProvider = /** @class */ (function () {
    function MapQuestProvider(_externalLoader, options) {
        if (options === void 0) { options = defaultMapQuestProviderOptions; }
        this.externalLoader = _externalLoader;
        this.options = __assign(__assign({}, defaultMapQuestProviderOptions), options);
        if (!this.options.apiKey) {
            throw new Error('An API key is required for the MapQuest provider. Please add it in the "apiKey" option.');
        }
        if (!["GET", "POST"].includes(this.options.method || "")) {
            throw new Error('The "method" option must either be "GET" or "POST".');
        }
        if (!["mapquest", "nominatim"].includes(this.options.source || "")) {
            throw new Error('The "source" option must either be "mapquest" or "nominatim".');
        }
    }
    MapQuestProvider.prototype.geocode = function (query, callback, errorCallback) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var geocodeQuery = ProviderHelpers.getGeocodeQueryFromParameter(query, MapQuestGeocodeQuery);
        if (geocodeQuery.getIp()) {
            throw new Error("The MapQuest provider does not support IP geolocation, only location geocoding.");
        }
        this.externalLoader.setOptions({
            method: this.options.method,
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.source === "nominatim"
                ? "open.mapquestapi.com"
                : "www.mapquestapi.com",
            pathname: "geocoding/v1/address",
        });
        var requestParams = {
            boundingBox: geocodeQuery.getBounds()
                ? ((_a = geocodeQuery.getBounds()) === null || _a === void 0 ? void 0 : _a.latitudeNE) + "," + ((_b = geocodeQuery.getBounds()) === null || _b === void 0 ? void 0 : _b.longitudeSW) + "," + ((_c = geocodeQuery.getBounds()) === null || _c === void 0 ? void 0 : _c.latitudeSW) + "," + ((_d = geocodeQuery.getBounds()) === null || _d === void 0 ? void 0 : _d.longitudeNE)
                : undefined,
            maxResults: geocodeQuery.getLimit().toString(),
        };
        if (geocodeQuery.getLocation()) {
            requestParams = __assign(__assign({}, geocodeQuery.getLocation()), requestParams);
        }
        else {
            requestParams = __assign({ location: geocodeQuery.getText() }, requestParams);
        }
        requestParams = this.options.method === "GET" ? requestParams : {};
        var params = this.withCommonParams(requestParams);
        var body = this.options.method === "POST"
            ? {
                location: geocodeQuery.getLocation()
                    ? (geocodeQuery.getLocation())
                    : geocodeQuery.getText(),
                options: {
                    boundingBox: geocodeQuery.getBounds()
                        ? {
                            ul: {
                                lat: (_e = geocodeQuery.getBounds()) === null || _e === void 0 ? void 0 : _e.latitudeNE,
                                lng: (_f = geocodeQuery.getBounds()) === null || _f === void 0 ? void 0 : _f.longitudeSW,
                            },
                            lr: {
                                lat: (_g = geocodeQuery.getBounds()) === null || _g === void 0 ? void 0 : _g.latitudeSW,
                                lng: (_h = geocodeQuery.getBounds()) === null || _h === void 0 ? void 0 : _h.longitudeNE,
                            },
                        }
                        : undefined,
                    maxResults: geocodeQuery.getLimit().toString(),
                },
            }
            : {};
        if (!callback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, body, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, callback, {}, body, errorCallback);
    };
    MapQuestProvider.prototype.geodecode = function (latitudeOrQuery, longitudeOrCallback, callbackOrErrorCallback, errorCallback) {
        var _this = this;
        var reverseQuery = ProviderHelpers.getReverseQueryFromParameters(latitudeOrQuery, longitudeOrCallback);
        var reverseCallback = ProviderHelpers.getCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback);
        var reverseErrorCallback = ProviderHelpers.getErrorCallbackFromParameters(longitudeOrCallback, callbackOrErrorCallback, errorCallback);
        this.externalLoader.setOptions({
            method: this.options.method,
            protocol: this.options.useSsl ? "https" : "http",
            host: this.options.source === "nominatim"
                ? "open.mapquestapi.com"
                : "www.mapquestapi.com",
            pathname: "geocoding/v1/reverse",
        });
        var requestParams = this.options.method === "GET"
            ? {
                location: reverseQuery.getCoordinates().latitude + "," + reverseQuery.getCoordinates().longitude,
            }
            : {};
        var params = this.withCommonParams(requestParams);
        var body = this.options.method === "POST"
            ? {
                location: {
                    latLng: {
                        lat: reverseQuery.getCoordinates().latitude,
                        lng: reverseQuery.getCoordinates().longitude,
                    },
                },
            }
            : {};
        if (!reverseCallback) {
            return new Promise(function (resolve, reject) {
                return _this.executeRequest(params, function (results) { return resolve(results); }, {}, body, function (error) { return reject(error); });
            });
        }
        return this.executeRequest(params, reverseCallback, {}, body, reverseErrorCallback);
    };
    MapQuestProvider.prototype.withCommonParams = function (params) {
        return __assign(__assign({}, params), { key: this.options.apiKey || "", jsonpCallback: this.options.useJsonp ? "callback" : undefined });
    };
    MapQuestProvider.prototype.executeRequest = function (params, callback, headers, body, errorCallback) {
        this.externalLoader.executeRequest(params, function (data) {
            if (data.info.statuscode !== 0) {
                var errorMessage_1 = "An error has occurred (" + data.info.statuscode + "): " + data.info.messages.join(" / ");
                if (errorCallback) {
                    errorCallback(new ResponseError(errorMessage_1, data));
                    return;
                }
                setTimeout(function () {
                    throw new Error(errorMessage_1);
                });
                return;
            }
            callback(data.results[0].locations.map(function (result) {
                return MapQuestProvider.mapToGeocoded(result, data.info.copyright.text);
            }));
        }, headers, body, errorCallback);
    };
    MapQuestProvider.mapToGeocoded = function (result, attribution) {
        var latitude = result.latLng.lat;
        var longitude = result.latLng.lng;
        var streetName = result.street;
        var subLocality = result.adminArea6;
        var locality = result.adminArea5;
        var postalCode = result.postalCode;
        var region = result.adminArea4;
        var country = result.adminArea1;
        var countryCode = result.adminArea1;
        var precision = result.geocodeQuality;
        var precisionCode = result.geocodeQualityCode;
        var mapUrl = result.mapUrl;
        var geocoded = MapQuestGeocoded.create({
            coordinates: {
                latitude: latitude,
                longitude: longitude,
            },
            streetName: streetName,
            subLocality: subLocality,
            locality: locality,
            postalCode: postalCode,
            region: region,
            country: country,
            countryCode: countryCode,
            attribution: attribution,
            precision: precision,
            precisionCode: precisionCode,
            mapUrl: mapUrl,
        });
        if (result.adminArea3) {
            geocoded.addAdminLevel(AdminLevel.create({
                level: ADMIN_LEVEL_CODES.STATE_CODE,
                name: result.adminArea3,
                code: result.adminArea3.length === 2 ? result.adminArea3 : undefined,
            }));
        }
        if (result.adminArea4) {
            geocoded.addAdminLevel(AdminLevel.create({
                level: ADMIN_LEVEL_CODES.COUNTY_CODE,
                name: result.adminArea4,
            }));
        }
        return geocoded;
    };
    return MapQuestProvider;
}());
export default MapQuestProvider;
//# sourceMappingURL=MapQuestProvider.js.map