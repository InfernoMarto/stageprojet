import { GeocodeQuery, GeocodeQueryObject } from "../../query";
import { Coordinates } from "../../types";
interface YandexSpan {
    spanLatitude: string;
    spanLongitude: string;
}
export interface YandexGeocodeQueryObject extends GeocodeQueryObject {
    readonly bounded?: boolean;
    readonly proximity?: Coordinates;
    readonly span?: YandexSpan;
    readonly skip?: number;
}
export default class YandexGeocodeQuery extends GeocodeQuery {
    private readonly bounded?;
    private readonly proximity?;
    private readonly span?;
    private readonly skip?;
    protected constructor({ bounded, proximity, span, skip, bounds, ...geocodeQueryObject }: YandexGeocodeQueryObject);
    static create(object: YandexGeocodeQueryObject): YandexGeocodeQuery;
    toObject(): YandexGeocodeQueryObject;
    withBounded(bounded: boolean): YandexGeocodeQuery;
    getBounded(): undefined | boolean;
    withProximity(proximity: Coordinates): YandexGeocodeQuery;
    getProximity(): undefined | Coordinates;
    withSpan(span: YandexSpan): YandexGeocodeQuery;
    getSpan(): undefined | YandexSpan;
    withSkip(skip: number): YandexGeocodeQuery;
    getSkip(): undefined | number;
}
export {};
//# sourceMappingURL=YandexGeocodeQuery.d.ts.map