import { GeocodeQuery, GeocodeQueryObject } from "../../query";
export interface LocationIQGeocodeQueryObject extends GeocodeQueryObject {
    readonly countryCodes?: string[];
    readonly excludePlaceIds?: number[];
    readonly bounded?: boolean;
    readonly dedupe?: boolean;
}
export default class LocationIQGeocodeQuery extends GeocodeQuery {
    private readonly countryCodes?;
    private readonly excludePlaceIds?;
    private readonly bounded?;
    private readonly dedupe?;
    protected constructor({ countryCodes, excludePlaceIds, bounded, bounds, dedupe, ...geocodeQueryObject }: LocationIQGeocodeQueryObject);
    static create(object: LocationIQGeocodeQueryObject): LocationIQGeocodeQuery;
    toObject(): LocationIQGeocodeQueryObject;
    withCountryCodes(countryCodes: string[]): LocationIQGeocodeQuery;
    getCountryCodes(): undefined | string[];
    withExcludePlaceIds(excludePlaceIds: number[]): LocationIQGeocodeQuery;
    getExcludePlaceIds(): undefined | number[];
    withBounded(bounded: boolean): LocationIQGeocodeQuery;
    getBounded(): undefined | boolean;
    withDedupe(dedupe: boolean): LocationIQGeocodeQuery;
    getDedupe(): undefined | boolean;
}
//# sourceMappingURL=LocationIQGeocodeQuery.d.ts.map